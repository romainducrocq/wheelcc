-- Lexing ... OK
-- Parsing ... OK
-- Semantic analysis ... OK
-- TAC representation ... OK
-- Assembly generation ... OK
+
+
@@ ASM AST @@
AsmProgram: 
  List[0]: 
  List[4]: 
    AsmStaticVariable: 
      TIdentifier: a
      TInt: 1
      Bool: 0
      List[1]: 
        CharInit: 
          TChar: 10
    AsmStaticVariable: 
      TIdentifier: b
      TInt: 1
      Bool: 0
      List[1]: 
        UCharInit: 
          TUChar: 20
    AsmStaticVariable: 
      TIdentifier: c
      TInt: 1
      Bool: 1
      List[1]: 
        CharInit: 
          TChar: 30
    AsmFunction: 
      TIdentifier: main
      Bool: 1
      Bool: 0
      List[60]: 
        AsmMovSx: 
          Byte: 
          LongWord: 
          AsmPseudo: 
            TIdentifier: a
          AsmPseudo: 
            TIdentifier: cast.2
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 10
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: cast.2
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.3
        AsmSetCC: 
          AsmNE: 
          AsmPseudo: 
            TIdentifier: binop.3
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.3
        AsmJmpCC: 
          TIdentifier: if_false.1
          AsmE: 
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 1
            Bool: 1
            Bool: 0
            Bool: 0
          AsmRegister: 
            AsmAx: 
        AsmRet: 
        AsmLabel: 
          TIdentifier: if_false.1
        AsmMovZeroExtend: 
          Byte: 
          LongWord: 
          AsmPseudo: 
            TIdentifier: b
          AsmPseudo: 
            TIdentifier: cast.4
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 20
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: cast.4
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.5
        AsmSetCC: 
          AsmNE: 
          AsmPseudo: 
            TIdentifier: binop.5
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.5
        AsmJmpCC: 
          TIdentifier: if_false.2
          AsmE: 
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 2
            Bool: 1
            Bool: 0
            Bool: 0
          AsmRegister: 
            AsmAx: 
        AsmRet: 
        AsmLabel: 
          TIdentifier: if_false.2
        AsmMovSx: 
          Byte: 
          LongWord: 
          AsmPseudo: 
            TIdentifier: c
          AsmPseudo: 
            TIdentifier: cast.6
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 30
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: cast.6
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.7
        AsmSetCC: 
          AsmNE: 
          AsmPseudo: 
            TIdentifier: binop.7
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.7
        AsmJmpCC: 
          TIdentifier: if_false.3
          AsmE: 
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 3
            Bool: 1
            Bool: 0
            Bool: 0
          AsmRegister: 
            AsmAx: 
        AsmRet: 
        AsmLabel: 
          TIdentifier: if_false.3
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: loop_counter.0
        AsmMov: 
          Byte: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: cast.8
        AsmMov: 
          Byte: 
          AsmPseudo: 
            TIdentifier: cast.8
          AsmPseudo: 
            TIdentifier: d.1
        AsmLabel: 
          TIdentifier: for_start.4
        AsmMovZeroExtend: 
          Byte: 
          LongWord: 
          AsmPseudo: 
            TIdentifier: d.1
          AsmPseudo: 
            TIdentifier: cast.9
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 100
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: cast.9
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.10
        AsmSetCC: 
          AsmL: 
          AsmPseudo: 
            TIdentifier: binop.10
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.10
        AsmJmpCC: 
          TIdentifier: break_for.0
          AsmE: 
        AsmMov: 
          LongWord: 
          AsmPseudo: 
            TIdentifier: loop_counter.0
          AsmPseudo: 
            TIdentifier: binop.11
        AsmBinary: 
          AsmAdd: 
          LongWord: 
          AsmImm: 
            TULong: 1
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.11
        AsmMov: 
          LongWord: 
          AsmPseudo: 
            TIdentifier: binop.11
          AsmPseudo: 
            TIdentifier: loop_counter.0
        AsmLabel: 
          TIdentifier: continue_for.0
        AsmMovZeroExtend: 
          Byte: 
          LongWord: 
          AsmPseudo: 
            TIdentifier: d.1
          AsmPseudo: 
            TIdentifier: cast.12
        AsmMov: 
          LongWord: 
          AsmPseudo: 
            TIdentifier: cast.12
          AsmPseudo: 
            TIdentifier: binop.13
        AsmBinary: 
          AsmAdd: 
          LongWord: 
          AsmImm: 
            TULong: 1
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.13
        AsmMov: 
          Byte: 
          AsmPseudo: 
            TIdentifier: binop.13
          AsmPseudo: 
            TIdentifier: cast.14
        AsmMov: 
          Byte: 
          AsmPseudo: 
            TIdentifier: cast.14
          AsmPseudo: 
            TIdentifier: d.1
        AsmJmp: 
          TIdentifier: for_start.4
        AsmLabel: 
          TIdentifier: break_for.0
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 100
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: loop_counter.0
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.15
        AsmSetCC: 
          AsmNE: 
          AsmPseudo: 
            TIdentifier: binop.15
        AsmCmp: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmPseudo: 
            TIdentifier: binop.15
        AsmJmpCC: 
          TIdentifier: if_false.5
          AsmE: 
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 4
            Bool: 1
            Bool: 0
            Bool: 0
          AsmRegister: 
            AsmAx: 
        AsmRet: 
        AsmLabel: 
          TIdentifier: if_false.5
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmRegister: 
            AsmAx: 
        AsmRet: 
        AsmMov: 
          LongWord: 
          AsmImm: 
            TULong: 0
            Bool: 1
            Bool: 0
            Bool: 0
          AsmRegister: 
            AsmAx: 
        AsmRet: 
+
+
@@ Addressed Set @@
Set(0):
+
+
@@ String Constant Table @@
Dict(0):
+
+
@@ Structure Typedef Table @@
Dict(0):
+
+
@@ Symbol Table @@
Dict(20):
  [a]: 
    Symbol: 
      SChar: 
      StaticAttr: 
        Bool: 0
        Initial: 
          List[1]: 
            CharInit: 
              TChar: 10
  [b]: 
    Symbol: 
      UChar: 
      StaticAttr: 
        Bool: 0
        Initial: 
          List[1]: 
            UCharInit: 
              TUChar: 20
  [c]: 
    Symbol: 
      Char: 
      StaticAttr: 
        Bool: 1
        Initial: 
          List[1]: 
            CharInit: 
              TChar: 30
  [main]: 
    Symbol: 
      FunType: 
        TULong: 0
        TULong: 1
        List[0]: 
        Int: 
      FunAttr: 
        Bool: 1
        Bool: 1
  [loop_counter.0]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [d.1]: 
    Symbol: 
      UChar: 
      LocalAttr: 
  [cast.2]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [binop.3]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [cast.4]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [binop.5]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [cast.6]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [binop.7]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [cast.8]: 
    Symbol: 
      UChar: 
      LocalAttr: 
  [cast.9]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [binop.10]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [binop.11]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [cast.12]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [binop.13]: 
    Symbol: 
      Int: 
      LocalAttr: 
  [cast.14]: 
    Symbol: 
      UChar: 
      LocalAttr: 
  [binop.15]: 
    Symbol: 
      Int: 
      LocalAttr: 
+
+
@@ Backend Symbol Table @@
Dict(0):
