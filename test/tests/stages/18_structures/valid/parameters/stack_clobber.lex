-- Lexing ... OK
+
+
@@ Tokens @@
List[685]:
  int
  identifier(strcmp)
  (
  char
  *
  identifier(s1)
  ,
  char
  *
  identifier(s2)
  )
  ;
  void
  identifier(exit)
  (
  int
  identifier(status)
  )
  ;
  struct
  identifier(stack_bytes)
  {
  char
  identifier(bytes)
  [
  const int(16)
  ]
  ;
  }
  ;
  static
  struct
  identifier(stack_bytes)
  identifier(to_validate)
  ;
  void
  identifier(validate_stack_bytes)
  (
  int
  identifier(code)
  )
  {
  if
  (
  identifier(strcmp)
  (
  identifier(to_validate)
  .
  identifier(bytes)
  ,
  string literal("efghijklmnopqrs")
  )
  )
  {
  identifier(exit)
  (
  identifier(code)
  )
  ;
  }
  return
  ;
  }
  struct
  identifier(one_longword)
  {
  int
  identifier(i)
  ;
  }
  ;
  void
  identifier(take_longword)
  (
  struct
  identifier(one_longword)
  identifier(s)
  ,
  int
  identifier(code)
  )
  {
  if
  (
  identifier(s)
  .
  identifier(i)
  !=
  const int(10)
  )
  {
  identifier(exit)
  (
  identifier(code)
  )
  ;
  }
  return
  ;
  }
  int
  identifier(pass_longword)
  (
  void
  )
  {
  struct
  identifier(stack_bytes)
  identifier(bytes)
  =
  {
  string literal("efghijklmnopqrs")
  }
  ;
  static
  struct
  identifier(one_longword)
  identifier(my_var)
  =
  {
  const int(10)
  }
  ;
  identifier(take_longword)
  (
  identifier(my_var)
  ,
  const int(1)
  )
  ;
  identifier(to_validate)
  =
  identifier(bytes)
  ;
  identifier(validate_stack_bytes)
  (
  const int(2)
  )
  ;
  return
  const int(0)
  ;
  }
  struct
  identifier(one_quadword)
  {
  long
  identifier(l)
  ;
  }
  ;
  void
  identifier(take_quadword)
  (
  struct
  identifier(one_quadword)
  identifier(s)
  ,
  int
  identifier(code)
  )
  {
  if
  (
  identifier(s)
  .
  identifier(l)
  !=
  const int(10)
  )
  {
  identifier(exit)
  (
  identifier(code)
  )
  ;
  }
  return
  ;
  }
  int
  identifier(pass_quadword)
  (
  void
  )
  {
  struct
  identifier(stack_bytes)
  identifier(bytes)
  =
  {
  string literal("efghijklmnopqrs")
  }
  ;
  static
  struct
  identifier(one_quadword)
  identifier(my_var)
  =
  {
  const int(10)
  }
  ;
  identifier(take_quadword)
  (
  identifier(my_var)
  ,
  const int(3)
  )
  ;
  identifier(to_validate)
  =
  identifier(bytes)
  ;
  identifier(validate_stack_bytes)
  (
  const int(4)
  )
  ;
  return
  const int(0)
  ;
  }
  struct
  identifier(one_double)
  {
  double
  identifier(d)
  ;
  }
  ;
  void
  identifier(take_double)
  (
  struct
  identifier(one_double)
  identifier(s)
  ,
  int
  identifier(code)
  )
  {
  if
  (
  identifier(s)
  .
  identifier(d)
  !=
  const int(10)
  )
  {
  identifier(exit)
  (
  identifier(code)
  )
  ;
  }
  return
  ;
  }
  int
  identifier(pass_double)
  (
  void
  )
  {
  struct
  identifier(stack_bytes)
  identifier(bytes)
  =
  {
  string literal("efghijklmnopqrs")
  }
  ;
  static
  struct
  identifier(one_double)
  identifier(my_var)
  =
  {
  const int(10)
  }
  ;
  identifier(take_double)
  (
  identifier(my_var)
  ,
  const int(5)
  )
  ;
  identifier(to_validate)
  =
  identifier(bytes)
  ;
  identifier(validate_stack_bytes)
  (
  const int(6)
  )
  ;
  return
  const int(0)
  ;
  }
  struct
  identifier(twelve_bytes)
  {
  char
  identifier(arr)
  [
  const int(12)
  ]
  ;
  }
  ;
  void
  identifier(take_twelve_bytes)
  (
  struct
  identifier(twelve_bytes)
  identifier(s)
  ,
  int
  identifier(code)
  )
  {
  if
  (
  identifier(strcmp)
  (
  identifier(s)
  .
  identifier(arr)
  ,
  string literal("abcdefghijk")
  )
  )
  {
  identifier(exit)
  (
  identifier(code)
  )
  ;
  }
  return
  ;
  }
  int
  identifier(pass_twelve_bytes)
  (
  void
  )
  {
  struct
  identifier(stack_bytes)
  identifier(bytes)
  =
  {
  string literal("efghijklmnopqrs")
  }
  ;
  static
  struct
  identifier(twelve_bytes)
  identifier(my_var)
  =
  {
  string literal("abcdefghijk")
  }
  ;
  identifier(take_twelve_bytes)
  (
  identifier(my_var)
  ,
  const int(7)
  )
  ;
  identifier(to_validate)
  =
  identifier(bytes)
  ;
  identifier(validate_stack_bytes)
  (
  const int(8)
  )
  ;
  return
  const int(0)
  ;
  }
  struct
  identifier(memory)
  {
  char
  identifier(arr)
  [
  const int(32)
  ]
  ;
  }
  ;
  void
  identifier(take_struct_in_mem)
  (
  struct
  identifier(memory)
  identifier(s)
  ,
  int
  identifier(code)
  )
  {
  if
  (
  identifier(strcmp)
  (
  identifier(s)
  .
  identifier(arr)
  ,
  string literal("Here's the thing: I'm a string.")
  )
  )
  {
  identifier(exit)
  (
  identifier(code)
  )
  ;
  }
  return
  ;
  }
  int
  identifier(pass_struct_in_mem)
  (
  void
  )
  {
  struct
  identifier(stack_bytes)
  identifier(bytes)
  =
  {
  string literal("efghijklmnopqrs")
  }
  ;
  static
  struct
  identifier(memory)
  identifier(my_var)
  =
  {
  string literal("Here's the thing: I'm a string.")
  }
  ;
  identifier(take_struct_in_mem)
  (
  identifier(my_var)
  ,
  const int(9)
  )
  ;
  identifier(to_validate)
  =
  identifier(bytes)
  ;
  identifier(validate_stack_bytes)
  (
  const int(10)
  )
  ;
  return
  const int(0)
  ;
  }
  struct
  identifier(irregular)
  {
  char
  identifier(arr)
  [
  const int(3)
  ]
  ;
  }
  ;
  void
  identifier(take_irregular_struct)
  (
  struct
  identifier(irregular)
  identifier(s)
  ,
  int
  identifier(code)
  )
  {
  if
  (
  identifier(strcmp)
  (
  identifier(s)
  .
  identifier(arr)
  ,
  string literal("12")
  )
  )
  {
  identifier(exit)
  (
  identifier(code)
  )
  ;
  }
  return
  ;
  }
  int
  identifier(pass_irregular_struct)
  (
  void
  )
  {
  struct
  identifier(stack_bytes)
  identifier(bytes)
  =
  {
  string literal("efghijklmnopqrs")
  }
  ;
  static
  struct
  identifier(irregular)
  identifier(my_var)
  =
  {
  string literal("12")
  }
  ;
  identifier(take_irregular_struct)
  (
  identifier(my_var)
  ,
  const int(11)
  )
  ;
  identifier(to_validate)
  =
  identifier(bytes)
  ;
  identifier(validate_stack_bytes)
  (
  const int(12)
  )
  ;
  return
  const int(0)
  ;
  }
  struct
  identifier(irregular_memory)
  {
  char
  identifier(arr)
  [
  const int(27)
  ]
  ;
  }
  ;
  void
  identifier(take_irregular_memory_struct)
  (
  struct
  identifier(irregular_memory)
  identifier(s)
  ,
  int
  identifier(code)
  )
  {
  if
  (
  identifier(strcmp)
  (
  identifier(s)
  .
  identifier(arr)
  ,
  string literal("The quick brown fox jumped")
  )
  )
  {
  identifier(exit)
  (
  identifier(code)
  )
  ;
  }
  return
  ;
  }
  int
  identifier(pass_irregular_memory_struct)
  (
  void
  )
  {
  struct
  identifier(stack_bytes)
  identifier(bytes)
  =
  {
  string literal("efghijklmnopqrs")
  }
  ;
  static
  struct
  identifier(irregular_memory)
  identifier(my_var)
  =
  {
  string literal("The quick brown fox jumped")
  }
  ;
  identifier(take_irregular_memory_struct)
  (
  identifier(my_var)
  ,
  const int(13)
  )
  ;
  identifier(to_validate)
  =
  identifier(bytes)
  ;
  identifier(validate_stack_bytes)
  (
  const int(14)
  )
  ;
  return
  const int(0)
  ;
  }
  int
  identifier(main)
  (
  void
  )
  {
  identifier(pass_longword)
  (
  )
  ;
  identifier(pass_quadword)
  (
  )
  ;
  identifier(pass_double)
  (
  )
  ;
  identifier(pass_twelve_bytes)
  (
  )
  ;
  identifier(pass_struct_in_mem)
  (
  )
  ;
  identifier(pass_irregular_struct)
  (
  )
  ;
  identifier(pass_irregular_memory_struct)
  (
  )
  ;
  return
  const int(0)
  ;
  }
