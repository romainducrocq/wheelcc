-- Lexing ... OK
+
+
@@ Tokens @@
List[405]:
  int
  identifier(strcmp)
  (
  char
  *
  identifier(s1)
  ,
  char
  *
  identifier(s2)
  )
  ;
  struct
  identifier(twelve_bytes)
  {
  int
  identifier(i)
  ;
  char
  identifier(arr)
  [
  const int(8)
  ]
  ;
  }
  ;
  struct
  identifier(inner)
  {
  int
  identifier(i)
  ;
  char
  identifier(ch2)
  ;
  }
  ;
  struct
  identifier(nested_ints)
  {
  char
  identifier(ch1)
  ;
  struct
  identifier(inner)
  identifier(nested)
  ;
  }
  ;
  struct
  identifier(flattened_ints)
  {
  char
  identifier(c)
  ;
  int
  identifier(i)
  ;
  char
  identifier(a)
  ;
  }
  ;
  struct
  identifier(large)
  {
  int
  identifier(i)
  ;
  double
  identifier(d)
  ;
  char
  identifier(arr)
  [
  const int(10)
  ]
  ;
  }
  ;
  struct
  identifier(two_ints)
  {
  int
  identifier(i)
  ;
  int
  identifier(i2)
  ;
  }
  ;
  struct
  identifier(nested_double)
  {
  double
  identifier(array)
  [
  const int(1)
  ]
  ;
  }
  ;
  struct
  identifier(two_eightbytes)
  {
  double
  identifier(d)
  ;
  char
  identifier(c)
  ;
  }
  ;
  struct
  identifier(pass_in_memory)
  {
  double
  identifier(w)
  ;
  double
  identifier(x)
  ;
  int
  identifier(y)
  ;
  long
  identifier(z)
  ;
  }
  ;
  int
  identifier(test_twelve_bytes)
  (
  struct
  identifier(twelve_bytes)
  identifier(s)
  )
  ;
  int
  identifier(test_nested_ints)
  (
  struct
  identifier(nested_ints)
  identifier(s)
  )
  ;
  int
  identifier(test_flattened_ints)
  (
  struct
  identifier(flattened_ints)
  identifier(s)
  )
  ;
  int
  identifier(test_large)
  (
  struct
  identifier(large)
  identifier(s)
  )
  ;
  int
  identifier(test_two_ints)
  (
  struct
  identifier(two_ints)
  identifier(s)
  )
  ;
  int
  identifier(test_nested_double)
  (
  struct
  identifier(nested_double)
  identifier(s)
  )
  ;
  int
  identifier(test_two_eightbytes)
  (
  struct
  identifier(two_eightbytes)
  identifier(s)
  )
  ;
  int
  identifier(test_pass_in_memory)
  (
  struct
  identifier(pass_in_memory)
  identifier(s)
  )
  ;
  int
  identifier(main)
  (
  void
  )
  {
  struct
  identifier(twelve_bytes)
  identifier(s1)
  =
  {
  const int(0)
  ,
  string literal("lmnopqr")
  }
  ;
  if
  (
  !
  identifier(test_twelve_bytes)
  (
  identifier(s1)
  )
  )
  {
  return
  const int(1)
  ;
  }
  struct
  identifier(nested_ints)
  identifier(s2)
  =
  {
  const int(127)
  ,
  {
  const int(2147483647)
  ,
  -
  const int(128)
  }
  }
  ;
  if
  (
  !
  identifier(test_nested_ints)
  (
  identifier(s2)
  )
  )
  {
  return
  const int(2)
  ;
  }
  struct
  identifier(flattened_ints)
  identifier(s3)
  =
  {
  const int(127)
  ,
  const int(2147483647)
  ,
  -
  const int(128)
  }
  ;
  if
  (
  !
  identifier(test_flattened_ints)
  (
  identifier(s3)
  )
  )
  {
  return
  const int(3)
  ;
  }
  struct
  identifier(large)
  identifier(s4)
  =
  {
  const int(200000)
  ,
  const double(23.25)
  ,
  string literal("abcdefghi")
  }
  ;
  if
  (
  !
  identifier(test_large)
  (
  identifier(s4)
  )
  )
  {
  return
  const int(4)
  ;
  }
  struct
  identifier(two_ints)
  identifier(s5)
  =
  {
  const int(999)
  ,
  const int(888)
  }
  ;
  if
  (
  !
  identifier(test_two_ints)
  (
  identifier(s5)
  )
  )
  {
  return
  const int(5)
  ;
  }
  struct
  identifier(nested_double)
  identifier(s6)
  =
  {
  {
  const double(25.125e3)
  }
  }
  ;
  if
  (
  !
  identifier(test_nested_double)
  (
  identifier(s6)
  )
  )
  {
  return
  const int(6)
  ;
  }
  struct
  identifier(two_eightbytes)
  identifier(s7)
  =
  {
  const double(1000.)
  ,
  const char('x')
  }
  ;
  if
  (
  !
  identifier(test_two_eightbytes)
  (
  identifier(s7)
  )
  )
  {
  return
  const int(7)
  ;
  }
  struct
  identifier(pass_in_memory)
  identifier(s8)
  =
  {
  const double(1.7e308)
  ,
  -
  const double(1.7e308)
  ,
  -
  const int(2147483647)
  ,
  -
  const long(9223372036854775807l)
  }
  ;
  if
  (
  !
  identifier(test_pass_in_memory)
  (
  identifier(s8)
  )
  )
  {
  return
  const int(8)
  ;
  }
  return
  const int(0)
  ;
  }
