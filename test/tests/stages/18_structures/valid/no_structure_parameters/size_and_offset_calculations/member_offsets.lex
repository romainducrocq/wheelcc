-- Lexing ... OK
+
+
@@ Tokens @@
List[1675]:
  struct
  identifier(eight_bytes)
  {
  int
  identifier(i)
  ;
  char
  identifier(c)
  ;
  }
  ;
  struct
  identifier(two_bytes)
  {
  char
  identifier(arr)
  [
  const int(2)
  ]
  ;
  }
  ;
  struct
  identifier(three_bytes)
  {
  char
  identifier(arr)
  [
  const int(3)
  ]
  ;
  }
  ;
  struct
  identifier(sixteen_bytes)
  {
  struct
  identifier(eight_bytes)
  identifier(eight)
  ;
  struct
  identifier(two_bytes)
  identifier(two)
  ;
  struct
  identifier(three_bytes)
  identifier(three)
  ;
  }
  ;
  struct
  identifier(seven_bytes)
  {
  struct
  identifier(two_bytes)
  identifier(two)
  ;
  struct
  identifier(three_bytes)
  identifier(three)
  ;
  struct
  identifier(two_bytes)
  identifier(two2)
  ;
  }
  ;
  struct
  identifier(twentyfour_bytes)
  {
  struct
  identifier(seven_bytes)
  identifier(seven)
  ;
  struct
  identifier(sixteen_bytes)
  identifier(sixteen)
  ;
  }
  ;
  struct
  identifier(twenty_bytes)
  {
  struct
  identifier(sixteen_bytes)
  identifier(sixteen)
  ;
  struct
  identifier(two_bytes)
  identifier(two)
  ;
  }
  ;
  struct
  identifier(wonky)
  {
  char
  identifier(arr)
  [
  const int(19)
  ]
  ;
  }
  ;
  struct
  identifier(internal_padding)
  {
  char
  identifier(c)
  ;
  double
  identifier(d)
  ;
  }
  ;
  struct
  identifier(contains_struct_array)
  {
  char
  identifier(c)
  ;
  struct
  identifier(eight_bytes)
  identifier(struct_array)
  [
  const int(3)
  ]
  ;
  }
  ;
  void
  *
  identifier(malloc)
  (
  unsigned
  long
  identifier(size)
  )
  ;
  int
  identifier(test_eightbytes)
  (
  void
  )
  {
  struct
  identifier(eight_bytes)
  identifier(s)
  ;
  unsigned
  long
  identifier(start_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  ;
  unsigned
  long
  identifier(i_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(i)
  ;
  unsigned
  long
  identifier(c_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(c)
  ;
  unsigned
  long
  identifier(end_addr)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(s)
  +
  const int(1)
  )
  ;
  if
  (
  identifier(start_addr)
  %
  const int(4)
  !=
  const int(0)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(start_addr)
  !=
  identifier(i_addr)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(c_addr)
  -
  identifier(start_addr)
  !=
  const int(4)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(end_addr)
  -
  identifier(start_addr)
  !=
  const int(8)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_internal_padding)
  (
  void
  )
  {
  struct
  identifier(internal_padding)
  *
  identifier(s_ptr)
  =
  identifier(malloc)
  (
  sizeof
  (
  struct
  identifier(internal_padding)
  )
  )
  ;
  unsigned
  long
  identifier(start_addr)
  =
  (
  unsigned
  long
  )
  identifier(s_ptr)
  ;
  unsigned
  long
  identifier(c_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s_ptr)
  ->
  identifier(c)
  ;
  unsigned
  long
  identifier(d_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s_ptr)
  ->
  identifier(d)
  ;
  unsigned
  long
  identifier(end_ptr)
  =
  (
  unsigned
  long
  )
  (
  identifier(s_ptr)
  +
  const int(1)
  )
  ;
  if
  (
  identifier(start_addr)
  %
  const int(8)
  !=
  const int(0)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(start_addr)
  !=
  identifier(c_addr)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(d_addr)
  -
  identifier(c_addr)
  !=
  const int(8)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(end_ptr)
  -
  identifier(start_addr)
  !=
  const int(16)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_three_bytes)
  (
  void
  )
  {
  static
  struct
  identifier(three_bytes)
  identifier(s)
  ;
  unsigned
  long
  identifier(start_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  ;
  unsigned
  long
  identifier(arr_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(arr)
  ;
  unsigned
  long
  identifier(arr0_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(arr)
  [
  const int(0)
  ]
  ;
  unsigned
  long
  identifier(arr1_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(arr)
  [
  const int(1)
  ]
  ;
  unsigned
  long
  identifier(arr1_addr_alt)
  =
  (
  unsigned
  long
  )
  (
  identifier(s)
  .
  identifier(arr)
  +
  const int(1)
  )
  ;
  unsigned
  long
  identifier(arr2_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(arr)
  [
  const int(2)
  ]
  ;
  unsigned
  long
  identifier(arr_end)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(s)
  .
  identifier(arr)
  +
  const int(1)
  )
  ;
  unsigned
  long
  identifier(struct_end)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(s)
  +
  const int(1)
  )
  ;
  if
  (
  identifier(start_addr)
  !=
  identifier(arr_addr)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(start_addr)
  !=
  identifier(arr0_addr)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(arr1_addr)
  -
  identifier(start_addr)
  !=
  const int(1)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(arr1_addr)
  !=
  identifier(arr1_addr_alt)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(arr2_addr)
  -
  identifier(start_addr)
  !=
  const int(2)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(arr_end)
  -
  identifier(start_addr)
  !=
  const int(3)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(struct_end)
  -
  identifier(start_addr)
  !=
  const int(3)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_sixteen_bytes)
  (
  void
  )
  {
  static
  struct
  identifier(sixteen_bytes)
  identifier(s)
  ;
  struct
  identifier(sixteen_bytes)
  *
  identifier(s_ptr)
  =
  &
  identifier(s)
  ;
  unsigned
  long
  identifier(start_addr)
  =
  (
  unsigned
  long
  )
  identifier(s_ptr)
  ;
  unsigned
  long
  identifier(eight_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s_ptr)
  ->
  identifier(eight)
  ;
  unsigned
  long
  identifier(eight_i_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s_ptr)
  ->
  identifier(eight)
  .
  identifier(i)
  ;
  unsigned
  long
  identifier(eight_c_addr)
  =
  (
  unsigned
  long
  )
  &
  identifier(s_ptr)
  ->
  identifier(eight)
  .
  identifier(c)
  ;
  unsigned
  long
  identifier(two)
  =
  (
  unsigned
  long
  )
  &
  identifier(s_ptr)
  ->
  identifier(two)
  ;
  unsigned
  long
  identifier(two_arr)
  =
  (
  unsigned
  long
  )
  identifier(s_ptr)
  ->
  identifier(two)
  .
  identifier(arr)
  ;
  unsigned
  long
  identifier(two_arr0)
  =
  (
  unsigned
  long
  )
  &
  identifier(s_ptr)
  ->
  identifier(two)
  .
  identifier(arr)
  [
  const int(0)
  ]
  ;
  unsigned
  long
  identifier(two_arr1)
  =
  (
  unsigned
  long
  )
  &
  identifier(s_ptr)
  ->
  identifier(two)
  .
  identifier(arr)
  [
  const int(1)
  ]
  ;
  unsigned
  long
  identifier(two_arr_end)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(s_ptr)
  ->
  identifier(two)
  .
  identifier(arr)
  +
  const int(1)
  )
  ;
  unsigned
  long
  identifier(two_end)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(s_ptr)
  ->
  identifier(two)
  +
  const int(1)
  )
  ;
  unsigned
  long
  identifier(three)
  =
  (
  unsigned
  long
  )
  &
  identifier(s_ptr)
  ->
  identifier(three)
  ;
  unsigned
  long
  identifier(three_end)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(s_ptr)
  ->
  identifier(three)
  +
  const int(1)
  )
  ;
  unsigned
  long
  identifier(struct_end)
  =
  (
  unsigned
  long
  )
  (
  identifier(s_ptr)
  +
  const int(1)
  )
  ;
  if
  (
  identifier(start_addr)
  %
  const int(4)
  !=
  const int(0)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(start_addr)
  !=
  identifier(eight_addr)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(start_addr)
  !=
  identifier(eight_i_addr)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(eight_c_addr)
  -
  identifier(start_addr)
  !=
  const int(4)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(two)
  -
  identifier(start_addr)
  !=
  const int(8)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(two_arr)
  -
  identifier(start_addr)
  !=
  const int(8)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(two_arr0)
  -
  identifier(start_addr)
  !=
  const int(8)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(two_arr1)
  -
  identifier(start_addr)
  !=
  const int(9)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(two_arr_end)
  -
  identifier(start_addr)
  !=
  const int(10)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(two_arr_end)
  !=
  identifier(two_end)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(three)
  -
  identifier(start_addr)
  !=
  const int(10)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(three_end)
  -
  identifier(start_addr)
  !=
  const int(13)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(struct_end)
  -
  identifier(start_addr)
  !=
  const int(16)
  )
  {
  return
  const int(0)
  ;
  }
  unsigned
  long
  identifier(eight_i_addr_alt)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(eight)
  .
  identifier(i)
  ;
  unsigned
  long
  identifier(eight_c_addr_alt)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(eight)
  .
  identifier(c)
  ;
  unsigned
  long
  identifier(two_arr_alt)
  =
  (
  unsigned
  long
  )
  identifier(s)
  .
  identifier(two)
  .
  identifier(arr)
  ;
  unsigned
  long
  identifier(two_arr1_alt)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(two)
  .
  identifier(arr)
  [
  const int(1)
  ]
  ;
  unsigned
  long
  identifier(three_alt)
  =
  (
  unsigned
  long
  )
  &
  identifier(s)
  .
  identifier(three)
  ;
  if
  (
  identifier(eight_i_addr_alt)
  !=
  identifier(eight_i_addr)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(eight_c_addr_alt)
  !=
  identifier(eight_c_addr)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(two_arr_alt)
  !=
  identifier(two_arr)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(two_arr1_alt)
  !=
  identifier(two_arr1)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(three_alt)
  !=
  identifier(three)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_wonky_array)
  (
  void
  )
  {
  struct
  identifier(wonky)
  identifier(wonky_array)
  [
  const int(5)
  ]
  ;
  unsigned
  long
  identifier(array_start)
  =
  (
  unsigned
  long
  )
  identifier(wonky_array)
  ;
  unsigned
  long
  identifier(elem3)
  =
  (
  unsigned
  long
  )
  (
  identifier(wonky_array)
  +
  const int(3)
  )
  ;
  unsigned
  long
  identifier(elem3_arr)
  =
  (
  unsigned
  long
  )
  identifier(wonky_array)
  [
  const int(3)
  ]
  .
  identifier(arr)
  ;
  unsigned
  long
  identifier(elem2_arr2)
  =
  (
  unsigned
  long
  )
  &
  identifier(wonky_array)
  [
  const int(2)
  ]
  .
  identifier(arr)
  [
  const int(2)
  ]
  ;
  unsigned
  long
  identifier(elem2_arr_end)
  =
  (
  unsigned
  long
  )
  (
  identifier(wonky_array)
  [
  const int(2)
  ]
  .
  identifier(arr)
  +
  const int(19)
  )
  ;
  unsigned
  long
  identifier(elem4_arr_end)
  =
  (
  unsigned
  long
  )
  (
  identifier(wonky_array)
  [
  const int(4)
  ]
  .
  identifier(arr)
  +
  const int(19)
  )
  ;
  unsigned
  long
  identifier(array_end)
  =
  (
  unsigned
  long
  )
  (
  identifier(wonky_array)
  +
  const int(5)
  )
  ;
  if
  (
  identifier(elem3)
  -
  identifier(array_start)
  !=
  const int(19)
  *
  const int(3)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(elem3_arr)
  !=
  identifier(elem3)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(elem2_arr2)
  -
  identifier(array_start)
  !=
  const int(19)
  *
  const int(2)
  +
  const int(2)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(elem2_arr_end)
  !=
  identifier(elem3)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(elem4_arr_end)
  !=
  identifier(array_end)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_contains_struct_array_array)
  (
  void
  )
  {
  struct
  identifier(contains_struct_array)
  identifier(arr)
  [
  const int(3)
  ]
  ;
  unsigned
  long
  identifier(array_start)
  =
  (
  unsigned
  long
  )
  identifier(arr)
  ;
  unsigned
  long
  identifier(first_scalar_elem)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(arr)
  [
  const int(0)
  ]
  .
  identifier(c)
  )
  ;
  unsigned
  long
  identifier(outer0_inner0_i)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(arr)
  [
  const int(0)
  ]
  .
  identifier(struct_array)
  ->
  identifier(i)
  )
  ;
  unsigned
  long
  identifier(outer0_inner0_c)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(arr)
  ->
  identifier(struct_array)
  ->
  identifier(c)
  )
  ;
  unsigned
  long
  identifier(outer0_end)
  =
  (
  unsigned
  long
  )
  (
  identifier(arr)
  ->
  identifier(struct_array)
  +
  const int(3)
  )
  ;
  unsigned
  long
  identifier(outer1)
  =
  (
  unsigned
  long
  )
  (
  &
  identifier(arr)
  [
  const int(1)
  ]
  )
  ;
  unsigned
  long
  identifier(outer1_arr)
  =
  (
  unsigned
  long
  )
  (
  identifier(arr)
  [
  const int(1)
  ]
  .
  identifier(struct_array)
  )
  ;
  unsigned
  long
  identifier(outer1_inner1_i)
  =
  (
  unsigned
  long
  )
  &
  (
  (
  (
  identifier(arr)
  +
  const int(1)
  )
  ->
  identifier(struct_array)
  +
  const int(1)
  )
  ->
  identifier(i)
  )
  ;
  unsigned
  long
  identifier(outer2_inner0_c)
  =
  (
  unsigned
  long
  )
  &
  (
  (
  identifier(arr)
  +
  const int(2)
  )
  ->
  identifier(struct_array)
  ->
  identifier(c)
  )
  ;
  if
  (
  identifier(array_start)
  %
  const int(4)
  !=
  const int(0)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(first_scalar_elem)
  !=
  identifier(array_start)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(outer0_inner0_i)
  -
  identifier(array_start)
  !=
  const int(4)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(outer0_inner0_c)
  -
  identifier(array_start)
  !=
  const int(8)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(outer0_end)
  !=
  identifier(outer1)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(outer1_arr)
  -
  identifier(array_start)
  !=
  const int(32)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(outer1_arr)
  -
  identifier(outer1)
  !=
  const int(4)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(outer1_inner1_i)
  -
  identifier(array_start)
  !=
  const int(40)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(outer2_inner0_c)
  -
  identifier(array_start)
  !=
  const int(64)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(main)
  (
  void
  )
  {
  if
  (
  !
  identifier(test_eightbytes)
  (
  )
  )
  {
  return
  const int(1)
  ;
  }
  if
  (
  !
  identifier(test_internal_padding)
  (
  )
  )
  {
  return
  const int(2)
  ;
  }
  if
  (
  !
  identifier(test_three_bytes)
  (
  )
  )
  {
  return
  const int(3)
  ;
  }
  if
  (
  !
  identifier(test_sixteen_bytes)
  (
  )
  )
  {
  return
  const int(4)
  ;
  }
  if
  (
  !
  identifier(test_wonky_array)
  (
  )
  )
  {
  return
  const int(5)
  ;
  }
  if
  (
  !
  identifier(test_contains_struct_array_array)
  (
  )
  )
  {
  return
  const int(6)
  ;
  }
  return
  const int(0)
  ;
  }
