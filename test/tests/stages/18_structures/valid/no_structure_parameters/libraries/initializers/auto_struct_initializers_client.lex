-- Lexing ... OK
+
+
@@ Tokens @@
List[373]:
  int
  identifier(strcmp)
  (
  char
  *
  identifier(s1)
  ,
  char
  *
  identifier(s2)
  )
  ;
  void
  *
  identifier(malloc)
  (
  unsigned
  long
  identifier(size)
  )
  ;
  void
  *
  identifier(calloc)
  (
  unsigned
  long
  identifier(nmemb)
  ,
  unsigned
  long
  identifier(size)
  )
  ;
  struct
  identifier(s)
  {
  char
  *
  identifier(one_msg)
  ;
  unsigned
  char
  identifier(two_arr)
  [
  const int(3)
  ]
  ;
  struct
  identifier(s)
  *
  identifier(three_self_ptr)
  ;
  double
  identifier(four_d)
  ;
  double
  *
  identifier(five_d_ptr)
  ;
  }
  ;
  int
  identifier(validate_full_initialization)
  (
  struct
  identifier(s)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(validate_partial_initialization)
  (
  struct
  identifier(s)
  *
  identifier(ptr)
  ,
  char
  *
  identifier(expected_msg)
  )
  ;
  int
  identifier(validate_converted)
  (
  struct
  identifier(s)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(validate_two_structs)
  (
  struct
  identifier(s)
  *
  identifier(ptr1)
  ,
  struct
  identifier(s)
  *
  identifier(ptr2)
  )
  ;
  double
  identifier(get_double)
  (
  void
  )
  {
  return
  const double(2e12)
  ;
  }
  int
  identifier(test_full_initialization)
  (
  void
  )
  {
  struct
  identifier(s)
  identifier(full)
  =
  {
  string literal("I'm a struct!")
  ,
  string literal("sup")
  ,
  &
  identifier(full)
  ,
  identifier(get_double)
  (
  )
  ,
  &
  (
  identifier(full)
  .
  identifier(four_d)
  )
  }
  ;
  return
  identifier(validate_full_initialization)
  (
  &
  identifier(full)
  )
  ;
  }
  int
  identifier(test_partial_initialization)
  (
  void
  )
  {
  static
  char
  *
  identifier(msg)
  =
  string literal("Another string literal")
  ;
  struct
  identifier(s)
  identifier(partial)
  =
  {
  identifier(msg)
  ,
  {
  const char('a')
  ,
  const char('b')
  }
  ,
  (
  struct
  identifier(s)
  *
  )
  identifier(calloc)
  (
  const int(1)
  ,
  sizeof
  (
  struct
  identifier(s)
  )
  )
  }
  ;
  return
  identifier(validate_partial_initialization)
  (
  &
  identifier(partial)
  ,
  identifier(msg)
  )
  ;
  }
  int
  identifier(test_implicit_type_conversions)
  (
  void
  )
  {
  static
  int
  identifier(i)
  =
  const int(3000)
  ;
  struct
  identifier(s)
  identifier(converted)
  =
  {
  identifier(malloc)
  (
  const int(5)
  )
  ,
  {
  identifier(i)
  /
  const int(2)
  ,
  identifier(i)
  /
  const int(3)
  ,
  identifier(i)
  *
  const int(4)
  }
  ,
  const long(0l)
  ,
  identifier(i)
  -
  const int(1)
  ,
  identifier(calloc)
  (
  const int(1)
  ,
  sizeof
  (
  double
  )
  )
  }
  ;
  return
  identifier(validate_converted)
  (
  &
  identifier(converted)
  )
  ;
  }
  int
  identifier(test_single_exp_initializer)
  (
  void
  )
  {
  double
  identifier(d)
  =
  const double(123.4)
  ;
  struct
  identifier(s)
  identifier(s1)
  =
  {
  string literal("Yet another string")
  ,
  string literal("xy")
  ,
  &
  identifier(s1)
  ,
  const double(150.0)
  ,
  &
  identifier(d)
  }
  ;
  struct
  identifier(s)
  identifier(s2)
  =
  identifier(s1)
  ;
  return
  identifier(validate_two_structs)
  (
  &
  identifier(s1)
  ,
  &
  identifier(s2)
  )
  ;
  }
  int
  identifier(main)
  (
  void
  )
  {
  if
  (
  !
  identifier(test_full_initialization)
  (
  )
  )
  {
  return
  const int(1)
  ;
  }
  if
  (
  !
  identifier(test_partial_initialization)
  (
  )
  )
  {
  return
  const int(2)
  ;
  }
  if
  (
  !
  identifier(test_implicit_type_conversions)
  (
  )
  )
  {
  return
  const int(3)
  ;
  }
  if
  (
  !
  identifier(test_single_exp_initializer)
  (
  )
  )
  {
  return
  const int(4)
  ;
  }
  return
  const int(0)
  ;
  }
