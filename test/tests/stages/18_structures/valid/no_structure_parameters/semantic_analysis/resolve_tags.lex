-- Lexing ... OK
+
+
@@ Tokens @@
List[878]:
  void
  *
  identifier(calloc)
  (
  unsigned
  long
  identifier(nmemb)
  ,
  unsigned
  long
  identifier(size)
  )
  ;
  void
  *
  identifier(malloc)
  (
  unsigned
  long
  identifier(size)
  )
  ;
  struct
  identifier(s)
  {
  int
  identifier(a)
  ;
  }
  ;
  int
  identifier(test_var_declaration)
  (
  void
  )
  {
  struct
  identifier(shadow)
  {
  int
  identifier(x)
  ;
  }
  ;
  struct
  identifier(shadow)
  identifier(outer)
  ;
  identifier(outer)
  .
  identifier(x)
  =
  const int(2)
  ;
  {
  struct
  identifier(shadow)
  {
  int
  identifier(y)
  ;
  }
  ;
  struct
  identifier(shadow)
  identifier(inner)
  ;
  identifier(inner)
  .
  identifier(y)
  =
  const int(3)
  ;
  if
  (
  identifier(outer)
  .
  identifier(x)
  !=
  const int(2)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(inner)
  .
  identifier(y)
  !=
  const int(3)
  )
  {
  return
  const int(0)
  ;
  }
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_member_declaration)
  (
  void
  )
  {
  struct
  identifier(s)
  {
  int
  identifier(b)
  ;
  struct
  identifier(s)
  *
  identifier(self_ptr)
  ;
  }
  ;
  struct
  identifier(s)
  identifier(my_struct)
  =
  {
  const int(123)
  ,
  const int(0)
  }
  ;
  identifier(my_struct)
  .
  identifier(self_ptr)
  =
  &
  identifier(my_struct)
  ;
  if
  (
  identifier(my_struct)
  .
  identifier(self_ptr)
  ->
  identifier(b)
  !=
  const int(123)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_function_declaration)
  (
  void
  )
  {
  struct
  identifier(s)
  identifier(outer_struct)
  =
  {
  const int(1)
  }
  ;
  {
  struct
  identifier(s)
  {
  int
  identifier(arr)
  [
  const int(40)
  ]
  ;
  }
  ;
  }
  struct
  identifier(s)
  *
  identifier(copy_struct)
  (
  struct
  identifier(s)
  *
  identifier(arg)
  )
  ;
  struct
  identifier(s)
  *
  identifier(copy)
  =
  identifier(copy_struct)
  (
  &
  identifier(outer_struct)
  )
  ;
  if
  (
  identifier(copy)
  ->
  identifier(a)
  !=
  identifier(outer_struct)
  .
  identifier(a)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  struct
  identifier(s)
  *
  identifier(copy_struct)
  (
  struct
  identifier(s)
  *
  identifier(arg)
  )
  {
  struct
  identifier(s)
  *
  identifier(ptr)
  =
  identifier(malloc)
  (
  const int(4)
  )
  ;
  identifier(ptr)
  ->
  identifier(a)
  =
  identifier(arg)
  ->
  identifier(a)
  ;
  return
  identifier(ptr)
  ;
  }
  int
  identifier(test_for_loop)
  (
  void
  )
  {
  for
  (
  struct
  identifier(s)
  identifier(loop_struct)
  =
  {
  const int(10)
  }
  ;
  identifier(loop_struct)
  .
  identifier(a)
  >
  const int(0)
  ;
  identifier(loop_struct)
  .
  identifier(a)
  =
  identifier(loop_struct)
  .
  identifier(a)
  -
  const int(1)
  )
  {
  struct
  identifier(s)
  {
  double
  identifier(d)
  ;
  }
  ;
  static
  struct
  identifier(s)
  identifier(loop_body_struct)
  =
  {
  const int(0)
  }
  ;
  identifier(loop_body_struct)
  .
  identifier(d)
  =
  identifier(loop_body_struct)
  .
  identifier(d)
  +
  const int(1)
  ;
  if
  (
  identifier(loop_struct)
  .
  identifier(a)
  ==
  const int(1)
  )
  {
  if
  (
  identifier(loop_body_struct)
  .
  identifier(d)
  !=
  const double(10.0)
  )
  {
  return
  const int(0)
  ;
  }
  }
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_cast)
  (
  void
  )
  {
  void
  *
  identifier(ptr)
  =
  identifier(malloc)
  (
  const int(10)
  )
  ;
  if
  (
  identifier(ptr)
  )
  {
  struct
  identifier(s)
  {
  char
  identifier(arr)
  [
  const int(10)
  ]
  ;
  }
  ;
  (
  (
  struct
  identifier(s)
  *
  )
  identifier(ptr)
  )
  ->
  identifier(arr)
  [
  const int(2)
  ]
  =
  const int(10)
  ;
  char
  identifier(byte)
  =
  (
  (
  char
  *
  )
  identifier(ptr)
  )
  [
  const int(2)
  ]
  ;
  if
  (
  identifier(byte)
  !=
  const int(10)
  )
  {
  return
  const int(0)
  ;
  }
  }
  void
  *
  identifier(second_ptr)
  =
  identifier(malloc)
  (
  const int(4)
  )
  ;
  (
  (
  struct
  identifier(s)
  *
  )
  identifier(second_ptr)
  )
  ->
  identifier(a)
  =
  const int(10)
  ;
  char
  identifier(lowest_byte)
  =
  (
  (
  char
  *
  )
  identifier(second_ptr)
  )
  [
  const int(0)
  ]
  ;
  if
  (
  identifier(lowest_byte)
  !=
  const int(10)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_sizeof)
  (
  void
  )
  {
  struct
  identifier(s)
  {
  int
  identifier(a)
  ;
  int
  identifier(b)
  ;
  }
  ;
  struct
  identifier(s)
  identifier(x)
  ;
  {
  struct
  identifier(s)
  {
  char
  identifier(arr)
  [
  const int(15)
  ]
  ;
  }
  ;
  if
  (
  sizeof
  identifier(x)
  !=
  const int(8)
  )
  {
  return
  const int(0)
  ;
  }
  ;
  if
  (
  sizeof
  (
  struct
  identifier(s)
  )
  !=
  const int(15)
  )
  {
  return
  const int(0)
  ;
  }
  }
  if
  (
  sizeof
  (
  struct
  identifier(s)
  )
  !=
  const int(8)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_derived_types)
  (
  void
  )
  {
  struct
  identifier(s)
  identifier(outer_struct)
  =
  {
  const int(1)
  }
  ;
  struct
  identifier(s)
  *
  (
  *
  identifier(outer_arr)
  )
  [
  const int(3)
  ]
  =
  identifier(calloc)
  (
  const int(3)
  ,
  sizeof
  (
  void
  *
  )
  )
  ;
  struct
  identifier(s)
  {
  int
  identifier(x)
  ;
  }
  ;
  struct
  identifier(s)
  identifier(inner_struct)
  =
  {
  const int(2)
  }
  ;
  struct
  identifier(s)
  *
  (
  *
  identifier(inner_arr)
  )
  [
  const int(3)
  ]
  =
  identifier(calloc)
  (
  const int(3)
  ,
  sizeof
  (
  void
  *
  )
  )
  ;
  identifier(outer_arr)
  [
  const int(0)
  ]
  [
  const int(0)
  ]
  =
  &
  identifier(outer_struct)
  ;
  identifier(outer_arr)
  [
  const int(0)
  ]
  [
  const int(1)
  ]
  =
  &
  identifier(outer_struct)
  ;
  identifier(inner_arr)
  [
  const int(0)
  ]
  [
  const int(0)
  ]
  =
  &
  identifier(inner_struct)
  ;
  identifier(inner_arr)
  [
  const int(0)
  ]
  [
  const int(2)
  ]
  =
  &
  identifier(inner_struct)
  ;
  if
  (
  identifier(outer_arr)
  [
  const int(0)
  ]
  [
  const int(0)
  ]
  ->
  identifier(a)
  !=
  const int(1)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(inner_arr)
  [
  const int(0)
  ]
  [
  const int(0)
  ]
  ->
  identifier(x)
  !=
  const int(2)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(test_contentless_tag_noop)
  (
  void
  )
  {
  struct
  identifier(s)
  {
  int
  identifier(x)
  ;
  int
  identifier(y)
  ;
  }
  ;
  struct
  identifier(s)
  ;
  struct
  identifier(s)
  identifier(var)
  ;
  identifier(var)
  .
  identifier(x)
  =
  const int(10)
  ;
  identifier(var)
  .
  identifier(y)
  =
  const int(11)
  ;
  if
  (
  identifier(var)
  .
  identifier(x)
  !=
  const int(10)
  ||
  identifier(var)
  .
  identifier(y)
  !=
  const int(11)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(main)
  (
  void
  )
  {
  if
  (
  !
  identifier(test_var_declaration)
  (
  )
  )
  {
  return
  const int(1)
  ;
  }
  if
  (
  !
  identifier(test_member_declaration)
  (
  )
  )
  {
  return
  const int(2)
  ;
  }
  if
  (
  !
  identifier(test_function_declaration)
  (
  )
  )
  {
  return
  const int(3)
  ;
  }
  if
  (
  !
  identifier(test_for_loop)
  (
  )
  )
  {
  return
  const int(4)
  ;
  }
  if
  (
  !
  identifier(test_cast)
  (
  )
  )
  {
  return
  const int(5)
  ;
  }
  if
  (
  !
  identifier(test_sizeof)
  (
  )
  )
  {
  return
  const int(6)
  ;
  }
  if
  (
  !
  identifier(test_derived_types)
  (
  )
  )
  {
  return
  const int(7)
  ;
  }
  if
  (
  !
  identifier(test_contentless_tag_noop)
  (
  )
  )
  {
  return
  const int(8)
  ;
  }
  return
  const int(0)
  ;
  }
