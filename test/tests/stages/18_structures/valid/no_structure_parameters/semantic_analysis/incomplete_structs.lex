-- Lexing ... OK
+
+
@@ Tokens @@
List[584]:
  void
  *
  identifier(malloc)
  (
  unsigned
  long
  identifier(size)
  )
  ;
  void
  *
  identifier(calloc)
  (
  unsigned
  long
  identifier(nmemb)
  ,
  unsigned
  long
  identifier(size)
  )
  ;
  int
  identifier(puts)
  (
  char
  *
  identifier(s)
  )
  ;
  int
  identifier(strcmp)
  (
  char
  *
  identifier(s1)
  ,
  char
  *
  identifier(s2)
  )
  ;
  struct
  identifier(never_used)
  ;
  struct
  identifier(never_used)
  identifier(incomplete_fun)
  (
  struct
  identifier(never_used)
  identifier(x)
  )
  ;
  int
  identifier(test_block_scope_forward_decl)
  (
  void
  )
  {
  struct
  identifier(s)
  ;
  struct
  identifier(s)
  *
  identifier(s_ptr)
  =
  const int(0)
  ;
  struct
  identifier(s)
  {
  int
  identifier(x)
  ;
  int
  identifier(y)
  ;
  }
  ;
  struct
  identifier(s)
  identifier(val)
  =
  {
  const int(1)
  ,
  const int(2)
  }
  ;
  identifier(s_ptr)
  =
  &
  identifier(val)
  ;
  if
  (
  identifier(s_ptr)
  ->
  identifier(x)
  !=
  const int(1)
  ||
  identifier(s_ptr)
  ->
  identifier(y)
  !=
  const int(2)
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  struct
  identifier(pair)
  ;
  struct
  identifier(pair)
  *
  identifier(make_struct)
  (
  void
  )
  ;
  int
  identifier(validate_struct)
  (
  struct
  identifier(pair)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(test_file_scope_forward_decl)
  (
  void
  )
  {
  struct
  identifier(pair)
  *
  identifier(my_struct)
  =
  identifier(make_struct)
  (
  )
  ;
  return
  identifier(validate_struct)
  (
  identifier(my_struct)
  )
  ;
  }
  struct
  identifier(pair)
  {
  long
  identifier(l)
  ;
  long
  identifier(m)
  ;
  }
  ;
  struct
  identifier(pair)
  *
  identifier(make_struct)
  (
  void
  )
  {
  struct
  identifier(pair)
  *
  identifier(retval)
  =
  identifier(malloc)
  (
  sizeof
  (
  struct
  identifier(pair)
  )
  )
  ;
  identifier(retval)
  ->
  identifier(l)
  =
  const int(100)
  ;
  identifier(retval)
  ->
  identifier(m)
  =
  const int(200)
  ;
  return
  identifier(retval)
  ;
  }
  int
  identifier(validate_struct)
  (
  struct
  identifier(pair)
  *
  identifier(ptr)
  )
  {
  return
  (
  identifier(ptr)
  ->
  identifier(l)
  ==
  const int(100)
  &&
  identifier(ptr)
  ->
  identifier(m)
  ==
  const int(200)
  )
  ;
  }
  struct
  identifier(msg_holder)
  ;
  void
  identifier(print_msg)
  (
  struct
  identifier(msg_holder)
  *
  identifier(param)
  )
  ;
  int
  identifier(validate_incomplete_var)
  (
  void
  )
  ;
  extern
  struct
  identifier(msg_holder)
  identifier(incomplete_var)
  ;
  int
  identifier(test_incomplete_var)
  (
  void
  )
  {
  identifier(print_msg)
  (
  &
  identifier(incomplete_var)
  )
  ;
  return
  identifier(validate_incomplete_var)
  (
  )
  ;
  }
  struct
  identifier(msg_holder)
  {
  char
  *
  identifier(msg)
  ;
  }
  ;
  int
  identifier(validate_incomplete_var)
  (
  void
  )
  {
  if
  (
  identifier(strcmp)
  (
  identifier(incomplete_var)
  .
  identifier(msg)
  ,
  string literal("I'm a struct!")
  )
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  struct
  identifier(msg_holder)
  identifier(incomplete_var)
  =
  {
  string literal("I'm a struct!")
  }
  ;
  void
  identifier(print_msg)
  (
  struct
  identifier(msg_holder)
  *
  identifier(param)
  )
  {
  identifier(puts)
  (
  identifier(param)
  ->
  identifier(msg)
  )
  ;
  }
  int
  identifier(test_deref_incomplete_var)
  (
  void
  )
  {
  struct
  identifier(undefined_struct)
  ;
  struct
  identifier(undefined_struct)
  *
  identifier(ptr)
  =
  identifier(malloc)
  (
  const int(4)
  )
  ;
  return
  &
  *
  identifier(ptr)
  ==
  identifier(ptr)
  ;
  }
  struct
  identifier(opaque_struct)
  ;
  struct
  identifier(opaque_struct)
  *
  identifier(use_struct_pointers)
  (
  struct
  identifier(opaque_struct)
  *
  identifier(param)
  )
  {
  if
  (
  identifier(param)
  ==
  const int(0)
  )
  {
  identifier(puts)
  (
  string literal("empty pointer!")
  )
  ;
  }
  return
  const int(0)
  ;
  }
  int
  identifier(test_use_incomplete_struct_pointers)
  (
  void
  )
  {
  struct
  identifier(opaque_struct)
  *
  identifier(ptr1)
  =
  identifier(calloc)
  (
  const int(1)
  ,
  const int(4)
  )
  ;
  struct
  identifier(opaque_struct)
  *
  identifier(ptr2)
  =
  identifier(calloc)
  (
  const int(1)
  ,
  const int(4)
  )
  ;
  char
  *
  identifier(ptr1_bytes)
  =
  (
  char
  *
  )
  identifier(ptr1)
  ;
  if
  (
  identifier(ptr1_bytes)
  [
  const int(0)
  ]
  ||
  identifier(ptr1_bytes)
  [
  const int(1)
  ]
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(ptr1)
  ==
  const int(0)
  ||
  identifier(ptr2)
  ==
  const int(0)
  ||
  identifier(ptr1)
  ==
  identifier(ptr2)
  )
  {
  return
  const int(0)
  ;
  }
  static
  int
  identifier(flse)
  =
  const int(0)
  ;
  struct
  identifier(opaque_struct)
  *
  identifier(ptr3)
  =
  identifier(flse)
  ?
  identifier(ptr1)
  :
  identifier(ptr2)
  ;
  if
  (
  identifier(ptr3)
  !=
  identifier(ptr2)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(use_struct_pointers)
  (
  identifier(ptr3)
  )
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
  int
  identifier(main)
  (
  void
  )
  {
  if
  (
  !
  identifier(test_block_scope_forward_decl)
  (
  )
  )
  {
  return
  const int(2)
  ;
  }
  if
  (
  !
  identifier(test_file_scope_forward_decl)
  (
  )
  )
  {
  return
  const int(3)
  ;
  }
  if
  (
  !
  identifier(test_incomplete_var)
  (
  )
  )
  {
  return
  const int(4)
  ;
  }
  if
  (
  !
  identifier(test_deref_incomplete_var)
  (
  )
  )
  {
  return
  const int(5)
  ;
  }
  if
  (
  !
  identifier(test_use_incomplete_struct_pointers)
  (
  )
  )
  {
  return
  const int(6)
  ;
  }
  return
  const int(0)
  ;
  }
