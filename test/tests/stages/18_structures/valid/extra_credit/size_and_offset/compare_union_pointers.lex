-- Lexing ... OK
+
+
@@ Tokens @@
List[198]:
  struct
  identifier(s)
  {
  int
  identifier(i)
  ;
  }
  ;
  union
  identifier(u)
  {
  char
  identifier(arr)
  [
  const int(3)
  ]
  ;
  double
  identifier(d)
  ;
  struct
  identifier(s)
  identifier(my_struct)
  ;
  }
  ;
  union
  identifier(u)
  identifier(my_union)
  ;
  int
  identifier(main)
  (
  void
  )
  {
  union
  identifier(u)
  *
  identifier(u_ptr)
  =
  &
  identifier(my_union)
  ;
  if
  (
  (
  void
  *
  )
  identifier(u_ptr)
  !=
  (
  void
  *
  )
  &
  (
  identifier(u_ptr)
  ->
  identifier(arr)
  )
  )
  {
  return
  const int(1)
  ;
  }
  if
  (
  !
  (
  (
  void
  *
  )
  identifier(u_ptr)
  ==
  (
  void
  *
  )
  &
  (
  identifier(u_ptr)
  ->
  identifier(d)
  )
  )
  )
  {
  return
  const int(2)
  ;
  }
  if
  (
  (
  void
  *
  )
  &
  (
  identifier(u_ptr)
  ->
  identifier(my_struct)
  )
  !=
  identifier(u_ptr)
  )
  {
  return
  const int(3)
  ;
  }
  if
  (
  identifier(my_union)
  .
  identifier(arr)
  !=
  (
  char
  *
  )
  &
  identifier(my_union)
  .
  identifier(d)
  )
  {
  return
  const int(4)
  ;
  }
  if
  (
  !
  (
  &
  identifier(my_union)
  .
  identifier(arr)
  [
  const int(0)
  ]
  >=
  (
  char
  *
  )
  &
  identifier(my_union)
  .
  identifier(my_struct)
  .
  identifier(i)
  )
  )
  {
  return
  const int(5)
  ;
  }
  if
  (
  !
  (
  (
  char
  *
  )
  (
  &
  identifier(u_ptr)
  ->
  identifier(d)
  )
  <=
  (
  char
  *
  )
  &
  identifier(u_ptr)
  ->
  identifier(my_struct)
  )
  )
  {
  return
  const int(6)
  ;
  }
  return
  const int(0)
  ;
  }
