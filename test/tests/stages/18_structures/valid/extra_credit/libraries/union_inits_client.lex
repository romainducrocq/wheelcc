-- Lexing ... OK
+
+
@@ Tokens @@
List[290]:
  int
  identifier(strcmp)
  (
  char
  *
  identifier(s1)
  ,
  char
  *
  identifier(s2)
  )
  ;
  union
  identifier(simple)
  {
  double
  identifier(d)
  ;
  char
  identifier(c)
  ;
  int
  *
  identifier(ptr)
  ;
  }
  ;
  union
  identifier(inner)
  {
  char
  identifier(arr)
  [
  const int(9)
  ]
  ;
  }
  ;
  struct
  identifier(my_struct)
  {
  long
  identifier(l)
  ;
  union
  identifier(inner)
  identifier(u)
  ;
  int
  identifier(i)
  ;
  }
  ;
  union
  identifier(nested)
  {
  struct
  identifier(my_struct)
  identifier(str)
  ;
  union
  identifier(simple)
  identifier(s)
  ;
  long
  identifier(l)
  ;
  }
  ;
  int
  identifier(validate_simple)
  (
  union
  identifier(simple)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(validate_simple_converted)
  (
  union
  identifier(simple)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(validate_nested)
  (
  union
  identifier(nested)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(validate_nested_partial)
  (
  union
  identifier(nested)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(test_simple)
  (
  void
  )
  {
  union
  identifier(simple)
  identifier(x)
  =
  {
  const double(123.45)
  }
  ;
  return
  identifier(validate_simple)
  (
  &
  identifier(x)
  )
  ;
  }
  int
  identifier(test_simple_converted)
  (
  void
  )
  {
  union
  identifier(simple)
  identifier(x)
  =
  {
  const unsigned long(18446744073709550315UL)
  }
  ;
  return
  identifier(validate_simple_converted)
  (
  &
  identifier(x)
  )
  ;
  }
  int
  identifier(test_nested)
  (
  void
  )
  {
  union
  identifier(nested)
  identifier(x)
  =
  {
  {
  const long(4294967395l)
  ,
  {
  {
  -
  const int(1)
  ,
  -
  const int(2)
  ,
  -
  const int(3)
  ,
  -
  const int(4)
  ,
  -
  const int(5)
  ,
  -
  const int(6)
  ,
  -
  const int(7)
  ,
  -
  const int(8)
  ,
  -
  const int(9)
  }
  }
  }
  }
  ;
  return
  identifier(validate_nested)
  (
  &
  identifier(x)
  )
  ;
  }
  int
  identifier(test_nested_partial_init)
  (
  void
  )
  {
  union
  identifier(nested)
  identifier(x)
  =
  {
  {
  const long(9000372036854775800l)
  ,
  {
  string literal("string")
  }
  }
  }
  ;
  return
  identifier(validate_nested_partial)
  (
  &
  identifier(x)
  )
  ;
  }
  int
  identifier(main)
  (
  void
  )
  {
  if
  (
  !
  identifier(test_simple)
  (
  )
  )
  {
  return
  const int(1)
  ;
  }
  if
  (
  !
  identifier(test_simple_converted)
  (
  )
  )
  {
  return
  const int(2)
  ;
  }
  if
  (
  !
  identifier(test_nested)
  (
  )
  )
  {
  return
  const int(3)
  ;
  }
  if
  (
  !
  identifier(test_nested_partial_init)
  (
  )
  )
  {
  return
  const int(4)
  ;
  }
  return
  const int(0)
  ;
  }
