-- Lexing ... OK
+
+
@@ Tokens @@
List[261]:
  int
  identifier(strcmp)
  (
  char
  *
  identifier(s1)
  ,
  char
  *
  identifier(s2)
  )
  ;
  union
  identifier(simple)
  {
  double
  identifier(d)
  ;
  char
  identifier(c)
  ;
  int
  *
  identifier(ptr)
  ;
  }
  ;
  union
  identifier(inner)
  {
  char
  identifier(arr)
  [
  const int(9)
  ]
  ;
  }
  ;
  struct
  identifier(my_struct)
  {
  long
  identifier(l)
  ;
  union
  identifier(inner)
  identifier(u)
  ;
  int
  identifier(i)
  ;
  }
  ;
  union
  identifier(nested)
  {
  struct
  identifier(my_struct)
  identifier(str)
  ;
  union
  identifier(simple)
  identifier(s)
  ;
  long
  identifier(l)
  ;
  }
  ;
  int
  identifier(validate_simple)
  (
  union
  identifier(simple)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(validate_simple_converted)
  (
  union
  identifier(simple)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(validate_nested)
  (
  union
  identifier(nested)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(validate_nested_partial)
  (
  union
  identifier(nested)
  *
  identifier(ptr)
  )
  ;
  int
  identifier(validate_simple)
  (
  union
  identifier(simple)
  *
  identifier(ptr)
  )
  {
  return
  (
  identifier(ptr)
  ->
  identifier(d)
  ==
  const double(123.45)
  )
  ;
  }
  int
  identifier(validate_simple_converted)
  (
  union
  identifier(simple)
  *
  identifier(ptr)
  )
  {
  return
  (
  identifier(ptr)
  ->
  identifier(d)
  ==
  const double(18446744073709549568.)
  )
  ;
  }
  int
  identifier(validate_nested)
  (
  union
  identifier(nested)
  *
  identifier(ptr)
  )
  {
  if
  (
  identifier(ptr)
  ->
  identifier(str)
  .
  identifier(l)
  !=
  const long(4294967395l)
  )
  {
  return
  const int(0)
  ;
  }
  for
  (
  int
  identifier(i)
  =
  const int(0)
  ;
  identifier(i)
  <
  const int(9)
  ;
  identifier(i)
  =
  identifier(i)
  +
  const int(1)
  )
  {
  if
  (
  identifier(ptr)
  ->
  identifier(str)
  .
  identifier(u)
  .
  identifier(arr)
  [
  identifier(i)
  ]
  !=
  -
  const int(1)
  -
  identifier(i)
  )
  {
  return
  const int(0)
  ;
  }
  }
  return
  const int(1)
  ;
  }
  int
  identifier(validate_nested_partial)
  (
  union
  identifier(nested)
  *
  identifier(ptr)
  )
  {
  if
  (
  identifier(ptr)
  ->
  identifier(str)
  .
  identifier(l)
  !=
  const long(9000372036854775800l)
  )
  {
  return
  const int(0)
  ;
  }
  if
  (
  identifier(strcmp)
  (
  identifier(ptr)
  ->
  identifier(str)
  .
  identifier(u)
  .
  identifier(arr)
  ,
  string literal("string")
  )
  )
  {
  return
  const int(0)
  ;
  }
  return
  const int(1)
  ;
  }
