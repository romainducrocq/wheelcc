-- Lexing ... OK
+
+
@@ Tokens @@
List[1566]:
  int
  identifier(strcmp)
  (
  char
  *
  identifier(s1)
  ,
  char
  *
  identifier(s2)
  )
  ;
  void
  identifier(exit)
  (
  int
  identifier(status)
  )
  ;
  void
  *
  identifier(malloc)
  (
  unsigned
  long
  identifier(size)
  )
  ;
  union
  identifier(one_double)
  {
  double
  identifier(d1)
  ;
  double
  identifier(d2)
  ;
  }
  ;
  struct
  identifier(has_union_with_double)
  {
  union
  identifier(one_double)
  identifier(member)
  ;
  }
  ;
  union
  identifier(has_struct_with_double)
  {
  struct
  identifier(has_union_with_double)
  identifier(s)
  ;
  double
  identifier(arr)
  [
  const int(1)
  ]
  ;
  }
  ;
  union
  identifier(one_int)
  {
  double
  identifier(d)
  ;
  char
  identifier(c)
  ;
  }
  ;
  union
  identifier(one_int_nested)
  {
  union
  identifier(one_int)
  identifier(oi)
  ;
  union
  identifier(one_double)
  identifier(od)
  ;
  }
  ;
  union
  identifier(char_int_mixed)
  {
  char
  identifier(arr)
  [
  const int(7)
  ]
  ;
  union
  identifier(char_int_mixed)
  *
  identifier(union_ptr)
  ;
  unsigned
  int
  identifier(ui)
  ;
  }
  ;
  union
  identifier(char_int_short)
  {
  char
  identifier(c)
  ;
  int
  identifier(i)
  ;
  }
  ;
  struct
  identifier(has_union)
  {
  unsigned
  int
  identifier(i)
  ;
  union
  identifier(char_int_short)
  identifier(u)
  ;
  }
  ;
  union
  identifier(has_struct_with_ints)
  {
  double
  identifier(d)
  ;
  struct
  identifier(has_union)
  identifier(s)
  ;
  unsigned
  long
  identifier(ul)
  ;
  }
  ;
  union
  identifier(two_doubles)
  {
  double
  identifier(arr)
  [
  const int(2)
  ]
  ;
  double
  identifier(single)
  ;
  }
  ;
  union
  identifier(has_xmm_union)
  {
  union
  identifier(one_double)
  identifier(u)
  ;
  union
  identifier(two_doubles)
  identifier(u2)
  ;
  }
  ;
  struct
  identifier(dbl_struct)
  {
  union
  identifier(one_double)
  identifier(member1)
  ;
  double
  identifier(member2)
  ;
  }
  ;
  union
  identifier(has_dbl_struct)
  {
  struct
  identifier(dbl_struct)
  identifier(member1)
  ;
  }
  ;
  union
  identifier(char_arr)
  {
  char
  identifier(arr)
  [
  const int(11)
  ]
  ;
  int
  identifier(i)
  ;
  }
  ;
  union
  identifier(two_arrs)
  {
  double
  identifier(dbl_arr)
  [
  const int(2)
  ]
  ;
  long
  identifier(long_arr)
  [
  const int(2)
  ]
  ;
  }
  ;
  union
  identifier(two_eightbyte_has_struct)
  {
  int
  identifier(arr)
  [
  const int(3)
  ]
  ;
  struct
  identifier(dbl_struct)
  identifier(member1)
  ;
  }
  ;
  struct
  identifier(char_first_eightbyte)
  {
  char
  identifier(c)
  ;
  double
  identifier(d)
  ;
  }
  ;
  struct
  identifier(int_second_eightbyte)
  {
  double
  identifier(d)
  ;
  int
  identifier(i)
  ;
  }
  ;
  union
  identifier(two_structs)
  {
  struct
  identifier(char_first_eightbyte)
  identifier(member1)
  ;
  struct
  identifier(int_second_eightbyte)
  identifier(member2)
  ;
  }
  ;
  struct
  identifier(nine_bytes)
  {
  int
  identifier(i)
  ;
  char
  identifier(arr)
  [
  const int(5)
  ]
  ;
  }
  ;
  union
  identifier(has_nine_byte_struct)
  {
  char
  identifier(c)
  ;
  long
  identifier(l)
  ;
  struct
  identifier(nine_bytes)
  identifier(s)
  ;
  }
  ;
  union
  identifier(uneven)
  {
  char
  identifier(arr)
  [
  const int(5)
  ]
  ;
  unsigned
  char
  identifier(uc)
  ;
  }
  ;
  struct
  identifier(has_uneven_union)
  {
  int
  identifier(i)
  ;
  union
  identifier(uneven)
  identifier(u)
  ;
  }
  ;
  union
  identifier(has_other_unions)
  {
  union
  identifier(uneven)
  identifier(u)
  ;
  union
  identifier(two_doubles)
  identifier(d)
  ;
  union
  identifier(has_nine_byte_struct)
  identifier(n)
  ;
  }
  ;
  union
  identifier(union_array)
  {
  union
  identifier(one_int)
  identifier(u_arr)
  [
  const int(2)
  ]
  ;
  }
  ;
  union
  identifier(uneven_union_array)
  {
  union
  identifier(uneven)
  identifier(u_arr)
  [
  const int(2)
  ]
  ;
  }
  ;
  struct
  identifier(small)
  {
  char
  identifier(arr)
  [
  const int(3)
  ]
  ;
  signed
  char
  identifier(sc)
  ;
  }
  ;
  union
  identifier(has_small_struct_array)
  {
  struct
  identifier(small)
  identifier(arr)
  [
  const int(3)
  ]
  ;
  }
  ;
  union
  identifier(gp_and_xmm)
  {
  double
  identifier(d_arr)
  [
  const int(2)
  ]
  ;
  char
  identifier(c)
  ;
  }
  ;
  union
  identifier(scalar_and_struct)
  {
  long
  *
  identifier(ptr)
  ;
  struct
  identifier(char_first_eightbyte)
  identifier(cfe)
  ;
  }
  ;
  struct
  identifier(has_two_unions)
  {
  union
  identifier(char_int_mixed)
  identifier(member1)
  ;
  union
  identifier(one_double)
  identifier(member2)
  ;
  }
  ;
  union
  identifier(small_struct_arr_and_dbl)
  {
  struct
  identifier(small)
  identifier(arr)
  [
  const int(2)
  ]
  ;
  union
  identifier(two_doubles)
  identifier(d)
  ;
  }
  ;
  union
  identifier(xmm_and_gp)
  {
  double
  identifier(d)
  ;
  struct
  identifier(int_second_eightbyte)
  identifier(ise)
  ;
  }
  ;
  union
  identifier(xmm_and_gp_nested)
  {
  union
  identifier(xmm_and_gp)
  identifier(member1)
  ;
  double
  identifier(arr)
  [
  const int(2)
  ]
  ;
  union
  identifier(two_doubles)
  identifier(d)
  ;
  }
  ;
  union
  identifier(lotsa_doubles)
  {
  double
  identifier(arr)
  [
  const int(3)
  ]
  ;
  int
  identifier(i)
  ;
  }
  ;
  union
  identifier(lotsa_chars)
  {
  char
  identifier(more_chars)
  [
  const int(18)
  ]
  ;
  char
  identifier(fewer_chars)
  [
  const int(5)
  ]
  ;
  }
  ;
  struct
  identifier(large)
  {
  int
  identifier(i)
  ;
  double
  identifier(d)
  ;
  char
  identifier(arr)
  [
  const int(10)
  ]
  ;
  }
  ;
  union
  identifier(contains_large_struct)
  {
  int
  identifier(i)
  ;
  unsigned
  long
  identifier(ul)
  ;
  struct
  identifier(large)
  identifier(l)
  ;
  }
  ;
  union
  identifier(contains_union_array)
  {
  union
  identifier(gp_and_xmm)
  identifier(arr)
  [
  const int(2)
  ]
  ;
  }
  ;
  int
  identifier(test_one_double)
  (
  union
  identifier(one_double)
  identifier(u)
  )
  ;
  int
  identifier(test_has_union_with_double)
  (
  struct
  identifier(has_union_with_double)
  identifier(s)
  )
  ;
  int
  identifier(test_has_struct_with_double)
  (
  union
  identifier(has_struct_with_double)
  identifier(u)
  )
  ;
  int
  identifier(test_one_int)
  (
  union
  identifier(one_int)
  identifier(u)
  )
  ;
  int
  identifier(test_one_int_nested)
  (
  union
  identifier(one_int_nested)
  identifier(u)
  )
  ;
  int
  identifier(test_char_int_mixed)
  (
  union
  identifier(char_int_mixed)
  identifier(u)
  )
  ;
  int
  identifier(test_has_union)
  (
  struct
  identifier(has_union)
  identifier(s)
  )
  ;
  int
  identifier(test_has_struct_with_ints)
  (
  union
  identifier(has_struct_with_ints)
  identifier(u)
  )
  ;
  int
  identifier(test_two_doubles)
  (
  union
  identifier(two_doubles)
  identifier(u)
  )
  ;
  int
  identifier(test_has_xmm_union)
  (
  union
  identifier(has_xmm_union)
  identifier(u)
  )
  ;
  int
  identifier(test_dbl_struct)
  (
  struct
  identifier(dbl_struct)
  identifier(s)
  )
  ;
  int
  identifier(test_has_dbl_struct)
  (
  union
  identifier(has_dbl_struct)
  identifier(u)
  )
  ;
  int
  identifier(test_char_arr)
  (
  union
  identifier(char_arr)
  identifier(u)
  )
  ;
  int
  identifier(test_two_arrs)
  (
  union
  identifier(two_arrs)
  identifier(u)
  )
  ;
  int
  identifier(test_two_eightbyte_has_struct)
  (
  union
  identifier(two_eightbyte_has_struct)
  identifier(u)
  )
  ;
  int
  identifier(test_two_structs)
  (
  union
  identifier(two_structs)
  identifier(u)
  )
  ;
  int
  identifier(test_has_nine_byte_struct)
  (
  union
  identifier(has_nine_byte_struct)
  identifier(u)
  )
  ;
  int
  identifier(test_has_uneven_union)
  (
  struct
  identifier(has_uneven_union)
  identifier(s)
  )
  ;
  int
  identifier(test_has_other_unions)
  (
  union
  identifier(has_other_unions)
  identifier(u)
  )
  ;
  int
  identifier(test_union_array)
  (
  union
  identifier(union_array)
  identifier(u)
  )
  ;
  int
  identifier(test_uneven_union_array)
  (
  union
  identifier(uneven_union_array)
  identifier(u)
  )
  ;
  int
  identifier(test_has_small_struct_array)
  (
  union
  identifier(has_small_struct_array)
  identifier(u)
  )
  ;
  int
  identifier(test_gp_and_xmm)
  (
  union
  identifier(gp_and_xmm)
  identifier(u)
  )
  ;
  int
  identifier(test_scalar_and_struct)
  (
  union
  identifier(scalar_and_struct)
  identifier(u)
  )
  ;
  int
  identifier(test_has_two_unions)
  (
  struct
  identifier(has_two_unions)
  identifier(s)
  )
  ;
  int
  identifier(test_small_struct_arr_and_dbl)
  (
  union
  identifier(small_struct_arr_and_dbl)
  identifier(u)
  )
  ;
  int
  identifier(test_xmm_and_gp)
  (
  union
  identifier(xmm_and_gp)
  identifier(u)
  )
  ;
  int
  identifier(test_xmm_and_gp_nested)
  (
  union
  identifier(xmm_and_gp_nested)
  identifier(u)
  )
  ;
  int
  identifier(test_lotsa_doubles)
  (
  union
  identifier(lotsa_doubles)
  identifier(u)
  )
  ;
  int
  identifier(test_lotsa_chars)
  (
  union
  identifier(lotsa_chars)
  identifier(u)
  )
  ;
  int
  identifier(test_contains_large_struct)
  (
  union
  identifier(contains_large_struct)
  identifier(u)
  )
  ;
  int
  identifier(test_contains_union_array)
  (
  union
  identifier(contains_union_array)
  identifier(u)
  )
  ;
  int
  identifier(pass_unions_and_structs)
  (
  int
  identifier(i1)
  ,
  int
  identifier(i2)
  ,
  struct
  identifier(has_union)
  identifier(one_gp_struct)
  ,
  double
  identifier(d1)
  ,
  union
  identifier(two_doubles)
  identifier(two_xmm)
  ,
  union
  identifier(one_int)
  identifier(one_gp)
  ,
  int
  identifier(i3)
  ,
  int
  identifier(i4)
  ,
  int
  identifier(i5)
  )
  ;
  int
  identifier(pass_gp_union_in_memory)
  (
  union
  identifier(two_doubles)
  identifier(two_xmm)
  ,
  struct
  identifier(has_union)
  identifier(one_gp_struct)
  ,
  int
  identifier(i1)
  ,
  int
  identifier(i2)
  ,
  int
  identifier(i3)
  ,
  int
  identifier(i4)
  ,
  int
  identifier(i5)
  ,
  int
  identifier(i6)
  ,
  union
  identifier(one_int)
  identifier(one_gp)
  )
  ;
  int
  identifier(pass_xmm_union_in_memory)
  (
  double
  identifier(d1)
  ,
  double
  identifier(d2)
  ,
  union
  identifier(two_doubles)
  identifier(two_xmm)
  ,
  union
  identifier(two_doubles)
  identifier(two_xmm_copy)
  ,
  double
  identifier(d3)
  ,
  double
  identifier(d4)
  ,
  union
  identifier(two_doubles)
  identifier(two_xmm_2)
  )
  ;
  int
  identifier(pass_borderline_union)
  (
  int
  identifier(i1)
  ,
  int
  identifier(i2)
  ,
  int
  identifier(i3)
  ,
  int
  identifier(i4)
  ,
  int
  identifier(i5)
  ,
  union
  identifier(char_arr)
  identifier(two_gp)
  )
  ;
  int
  identifier(pass_borderline_xmm_union)
  (
  union
  identifier(two_doubles)
  identifier(two_xmm)
  ,
  double
  identifier(d1)
  ,
  double
  identifier(d2)
  ,
  double
  identifier(d3)
  ,
  double
  identifier(d4)
  ,
  double
  identifier(d5)
  ,
  union
  identifier(two_doubles)
  identifier(two_xmm_2)
  )
  ;
  int
  identifier(pass_mixed_reg_in_memory)
  (
  double
  identifier(d1)
  ,
  double
  identifier(d2)
  ,
  double
  identifier(d3)
  ,
  double
  identifier(d4)
  ,
  int
  identifier(i1)
  ,
  int
  identifier(i2)
  ,
  int
  identifier(i3)
  ,
  int
  identifier(i4)
  ,
  int
  identifier(i5)
  ,
  int
  identifier(i6)
  ,
  union
  identifier(gp_and_xmm)
  identifier(mixed_regs)
  )
  ;
  int
  identifier(pass_uneven_union_in_memory)
  (
  int
  identifier(i1)
  ,
  int
  identifier(i2)
  ,
  int
  identifier(i3)
  ,
  int
  identifier(i4)
  ,
  int
  identifier(i5)
  ,
  union
  identifier(gp_and_xmm)
  identifier(mixed_regs)
  ,
  union
  identifier(one_int)
  identifier(one_gp)
  ,
  union
  identifier(uneven)
  identifier(uneven)
  )
  ;
  int
  identifier(pass_in_mem_first)
  (
  union
  identifier(lotsa_doubles)
  identifier(mem)
  ,
  union
  identifier(gp_and_xmm)
  identifier(mixed_regs)
  ,
  union
  identifier(char_arr)
  identifier(two_gp)
  ,
  struct
  identifier(has_union)
  identifier(one_gp_struct)
  )
  ;
  union
  identifier(one_double)
  identifier(return_one_double)
  (
  void
  )
  ;
  union
  identifier(one_int_nested)
  identifier(return_one_int_nested)
  (
  void
  )
  ;
  union
  identifier(has_dbl_struct)
  identifier(return_has_dbl_struct)
  (
  void
  )
  ;
  union
  identifier(two_arrs)
  identifier(return_two_arrs)
  (
  void
  )
  ;
  union
  identifier(scalar_and_struct)
  identifier(return_scalar_and_struct)
  (
  void
  )
  ;
  union
  identifier(xmm_and_gp)
  identifier(return_xmm_and_gp)
  (
  void
  )
  ;
  union
  identifier(contains_union_array)
  identifier(return_contains_union_array)
  (
  void
  )
  ;
  union
  identifier(lotsa_chars)
  identifier(pass_params_and_return_in_mem)
  (
  int
  identifier(i1)
  ,
  union
  identifier(scalar_and_struct)
  identifier(int_and_dbl)
  ,
  union
  identifier(two_arrs)
  identifier(two_arrs)
  ,
  int
  identifier(i2)
  ,
  union
  identifier(contains_union_array)
  identifier(big_union)
  ,
  union
  identifier(one_int_nested)
  identifier(oin)
  )
  ;
  struct
  identifier(has_uneven_union)
  identifier(return_struct_with_union)
  (
  void
  )
  ;
  union
  identifier(one_double)
  identifier(return_one_double)
  (
  void
  )
  {
  union
  identifier(one_double)
  identifier(result)
  =
  {
  const double(245.5)
  }
  ;
  return
  identifier(result)
  ;
  }
  union
  identifier(one_int_nested)
  identifier(return_one_int_nested)
  (
  void
  )
  {
  union
  identifier(one_int_nested)
  identifier(result)
  =
  {
  {
  -
  const double(9876.5)
  }
  }
  ;
  return
  identifier(result)
  ;
  }
  union
  identifier(has_dbl_struct)
  identifier(return_has_dbl_struct)
  (
  void
  )
  {
  union
  identifier(has_dbl_struct)
  identifier(result)
  =
  {
  {
  {
  const double(1234.5)
  }
  ,
  const double(6789.)
  }
  }
  ;
  return
  identifier(result)
  ;
  }
  union
  identifier(two_arrs)
  identifier(return_two_arrs)
  (
  void
  )
  {
  union
  identifier(two_arrs)
  identifier(result)
  ;
  identifier(result)
  .
  identifier(dbl_arr)
  [
  const int(0)
  ]
  =
  const double(66.75)
  ;
  identifier(result)
  .
  identifier(long_arr)
  [
  const int(1)
  ]
  =
  -
  const long(4294967300l)
  ;
  return
  identifier(result)
  ;
  }
  union
  identifier(scalar_and_struct)
  identifier(return_scalar_and_struct)
  (
  void
  )
  {
  union
  identifier(scalar_and_struct)
  identifier(result)
  ;
  identifier(result)
  .
  identifier(cfe)
  .
  identifier(c)
  =
  -
  const int(115)
  ;
  identifier(result)
  .
  identifier(cfe)
  .
  identifier(d)
  =
  const double(222222.25)
  ;
  return
  identifier(result)
  ;
  }
  union
  identifier(xmm_and_gp)
  identifier(return_xmm_and_gp)
  (
  void
  )
  {
  union
  identifier(xmm_and_gp)
  identifier(result)
  ;
  identifier(result)
  .
  identifier(ise)
  .
  identifier(d)
  =
  -
  const double(50000.125)
  ;
  identifier(result)
  .
  identifier(ise)
  .
  identifier(i)
  =
  -
  const int(3000)
  ;
  return
  identifier(result)
  ;
  }
  union
  identifier(contains_union_array)
  identifier(return_contains_union_array)
  (
  void
  )
  {
  union
  identifier(contains_union_array)
  identifier(result)
  =
  {
  {
  {
  {
  -
  const double(2000e-4)
  ,
  -
  const double(3000e-4)
  }
  }
  ,
  {
  {
  const double(20000e10)
  ,
  const double(5000e11)
  }
  }
  }
  }
  ;
  return
  identifier(result)
  ;
  }
  union
  identifier(lotsa_chars)
  identifier(pass_params_and_return_in_mem)
  (
  int
  identifier(i1)
  ,
  union
  identifier(scalar_and_struct)
  identifier(int_and_dbl)
  ,
  union
  identifier(two_arrs)
  identifier(two_arrs)
  ,
  int
  identifier(i2)
  ,
  union
  identifier(contains_union_array)
  identifier(big_union)
  ,
  union
  identifier(one_int_nested)
  identifier(oin)
  )
  {
  if
  (
  identifier(i1)
  !=
  const int(1)
  ||
  identifier(i2)
  !=
  const int(25)
  )
  {
  identifier(exit)
  (
  -
  const int(1)
  )
  ;
  }
  if
  (
  identifier(int_and_dbl)
  .
  identifier(cfe)
  .
  identifier(c)
  !=
  -
  const int(115)
  ||
  identifier(int_and_dbl)
  .
  identifier(cfe)
  .
  identifier(d)
  !=
  const double(222222.25)
  )
  {
  identifier(exit)
  (
  -
  const int(2)
  )
  ;
  }
  if
  (
  identifier(two_arrs)
  .
  identifier(dbl_arr)
  [
  const int(0)
  ]
  !=
  const double(66.75)
  ||
  identifier(two_arrs)
  .
  identifier(long_arr)
  [
  const int(1)
  ]
  !=
  -
  const long(4294967300l)
  )
  {
  identifier(exit)
  (
  -
  const int(3)
  )
  ;
  }
  if
  (
  !
  (
  identifier(big_union)
  .
  identifier(arr)
  [
  const int(0)
  ]
  .
  identifier(d_arr)
  [
  const int(0)
  ]
  ==
  -
  const double(2000e-4)
  &&
  identifier(big_union)
  .
  identifier(arr)
  [
  const int(0)
  ]
  .
  identifier(d_arr)
  [
  const int(1)
  ]
  ==
  -
  const double(3000e-4)
  &&
  identifier(big_union)
  .
  identifier(arr)
  [
  const int(1)
  ]
  .
  identifier(d_arr)
  [
  const int(0)
  ]
  ==
  const double(20000e10)
  &&
  identifier(big_union)
  .
  identifier(arr)
  [
  const int(1)
  ]
  .
  identifier(d_arr)
  [
  const int(1)
  ]
  ==
  const double(5000e11)
  )
  )
  {
  identifier(exit)
  (
  -
  const int(4)
  )
  ;
  }
  if
  (
  identifier(oin)
  .
  identifier(oi)
  .
  identifier(d)
  !=
  -
  const double(9876.5)
  )
  {
  identifier(exit)
  (
  -
  const int(5)
  )
  ;
  }
  union
  identifier(lotsa_chars)
  identifier(result)
  =
  {
  string literal("ABCDEFGHIJKLMNOPQ")
  }
  ;
  return
  identifier(result)
  ;
  }
  struct
  identifier(has_uneven_union)
  identifier(return_struct_with_union)
  (
  void
  )
  {
  struct
  identifier(has_uneven_union)
  identifier(result)
  =
  {
  -
  const int(8765)
  ,
  {
  string literal("done")
  }
  }
  ;
  return
  identifier(result)
  ;
  }
