-- Lexing ... OK
+
+
@@ Tokens @@
List[189]:
  struct
  identifier(inner)
  {
  char
  identifier(x)
  ;
  long
  identifier(y)
  ;
  }
  ;
  struct
  identifier(outer)
  {
  double
  identifier(d)
  ;
  struct
  identifier(inner)
  *
  identifier(ptr)
  ;
  struct
  identifier(inner)
  identifier(s)
  ;
  }
  ;
  void
  *
  identifier(calloc)
  (
  unsigned
  long
  identifier(nmemb)
  ,
  unsigned
  long
  identifier(size)
  )
  ;
  struct
  identifier(inner)
  identifier(return_small_struct)
  (
  void
  )
  ;
  struct
  identifier(outer)
  identifier(return_nested_struct)
  (
  void
  )
  ;
  int
  identifier(main)
  (
  void
  )
  {
  if
  (
  identifier(return_small_struct)
  (
  )
  .
  identifier(y)
  !=
  const int(102)
  )
  {
  return
  const int(1)
  ;
  }
  if
  (
  identifier(return_nested_struct)
  (
  )
  .
  identifier(d)
  !=
  const double(2.0)
  ||
  identifier(return_nested_struct)
  (
  )
  .
  identifier(s)
  .
  identifier(x)
  !=
  const int(10)
  ||
  identifier(return_nested_struct)
  (
  )
  .
  identifier(s)
  .
  identifier(y)
  !=
  const int(11)
  )
  {
  return
  const int(3)
  ;
  }
  if
  (
  identifier(return_nested_struct)
  (
  )
  .
  identifier(ptr)
  ->
  identifier(x)
  !=
  const int(12)
  ||
  identifier(return_nested_struct)
  (
  )
  .
  identifier(ptr)
  ->
  identifier(y)
  !=
  const int(13)
  )
  {
  return
  const int(4)
  ;
  }
  identifier(return_nested_struct)
  (
  )
  .
  identifier(ptr)
  ->
  identifier(x)
  =
  const int(70)
  ;
  identifier(return_nested_struct)
  (
  )
  .
  identifier(ptr)
  ->
  identifier(y)
  =
  const int(71)
  ;
  if
  (
  identifier(return_nested_struct)
  (
  )
  .
  identifier(ptr)
  ->
  identifier(x)
  !=
  const int(70)
  ||
  identifier(return_nested_struct)
  (
  )
  .
  identifier(ptr)
  ->
  identifier(y)
  !=
  const int(71)
  )
  {
  return
  const int(5)
  ;
  }
  return
  const int(0)
  ;
  }
