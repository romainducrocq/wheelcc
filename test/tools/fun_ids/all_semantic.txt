static TChar get_char_constant_value(
static TDouble get_double_constant_value(
static TInt get_array_aggregate_type_alignment(
static TInt get_int_constant_value(
static TInt get_scalar_type_size(
static TInt get_structure_aggregate_type_alignment(
static TInt get_type_alignment(
static TLong get_array_aggregate_type_scale(
static TLong get_long_constant_value(
static TLong get_structure_aggregate_type_scale(
static TLong get_type_scale(
static TUChar get_uchar_constant_value(
static TUInt get_uint_constant_value(
static TULong get_pointer_constant_value(
static TULong get_ulong_constant_value(
static bool is_array_same_type(
static bool is_constant_null_pointer(
static bool is_dot_exp_lvalue(CDot* node) { return is_exp_lvalue(
static bool is_exp_lvalue(
static bool is_file_scope(
static bool is_pointer_same_type(
static bool is_same_fun_type(
static bool is_same_type(
static bool is_struct_type_complete(
static bool is_structure_same_type(
static bool is_type_arithmetic(
static bool is_type_character(
static bool is_type_complete(
static bool is_type_integer(
static bool is_type_scalar(
static bool is_type_signed(
static size_t get_compound_init_line(
static std::shared_ptr<Initial> checktype_initializer_initial(
static std::shared_ptr<Initial> checktype_no_initializer_initial(
static std::shared_ptr<Type> get_joint_pointer_type(
static std::shared_ptr<Type> get_joint_type(
static std::unique_ptr<CAddrOf> checktype_array_aggregate_typed_expression(
static std::unique_ptr<CCast> cast_by_assignment(
static std::unique_ptr<CCast> cast_expression(
static std::unique_ptr<CCompoundInit> checktype_array_compound_init_zero_initializer(
static std::unique_ptr<CCompoundInit> checktype_structure_compound_init_zero_initializer(
static std::unique_ptr<CExp> checktype_scalar_typed_expression(
static std::unique_ptr<CExp> checktype_structure_aggregate_typed_expression(
static std::unique_ptr<CExp> checktype_typed_expression(
static std::unique_ptr<CExp> resolve_typed_expression(
static std::unique_ptr<CInitializer> checktype_zero_initializer(
static std::unique_ptr<CSingleInit> checktype_single_init_zero_initializer(
static void annotate_break_jump(
static void annotate_case_jump(
static void annotate_continue_jump(
static void annotate_default_jump(
static void annotate_do_while_loop(
static void annotate_for_loop(
static void annotate_goto_label(
static void annotate_switch_lookup(
static void annotate_while_loop(
static void checktype_addrof_expression(
static void checktype_array_compound_init_initializer(
static void checktype_array_compound_init_initializer_static_init(
static void checktype_array_single_init_string_initializer(
static void checktype_arrow_expression(
static void checktype_assignment_expression(
static void checktype_automatic_block_scope_variable_declaration(
static void checktype_binary_arithmetic_add_expression(
static void checktype_binary_arithmetic_bitshift_expression(
static void checktype_binary_arithmetic_bitshift_right_expression(
static void checktype_binary_arithmetic_multiply_divide_expression(
static void checktype_binary_arithmetic_remainder_bitwise_expression(
static void checktype_binary_arithmetic_subtract_expression(
static void checktype_binary_comparison_equality_expression(
static void checktype_binary_comparison_relational_expression(
static void checktype_binary_expression(
static void checktype_binary_logical_expression(
static void checktype_block_scope_variable_declaration(
static void checktype_bound_array_compound_init_initializer(
static void checktype_bound_array_single_init_string_initializer(
static void checktype_bound_structure_compound_init_initializer(
static void checktype_cast_expression(
static void checktype_compound_init_initializer_static_init(
static void checktype_conditional_expression(
static void checktype_constant_expression(
static void checktype_constant_initializer_static_init(
static void checktype_dereference_expression(
static void checktype_do_while_statement(
static void checktype_dot_expression(
static void checktype_extern_block_scope_variable_declaration(
static void checktype_file_scope_variable_declaration(
static void checktype_for_statement(
static void checktype_function_call_expression(
static void checktype_function_declaration(
static void checktype_if_statement(
static void checktype_initializer_static_init(
static void checktype_members_structure_declaration(
static void checktype_no_initializer_static_init(
static void checktype_params_function_declaration(
static void checktype_return_function_declaration(
static void checktype_return_statement(
static void checktype_single_init_initializer(
static void checktype_single_init_initializer_static_init(
static void checktype_sizeof_expression(
static void checktype_sizeoft_expression(
static void checktype_static_block_scope_variable_declaration(
static void checktype_string_expression(
static void checktype_string_initializer_array_static_init(
static void checktype_string_initializer_pointer_static_init(
static void checktype_string_initializer_static_init(
static void checktype_structure_compound_init_initializer(
static void checktype_structure_compound_init_initializer_static_init(
static void checktype_structure_declaration(
static void checktype_subscript_expression(
static void checktype_switch_statement(
static void checktype_unary_complement_expression(
static void checktype_unary_expression(
static void checktype_unary_negate_expression(
static void checktype_unary_not_expression(
static void checktype_var_expression(
static void checktype_while_statement(
static void deannotate_lookup(
static void deannotate_loop(
static void enter_scope(
static void exit_scope(
static void is_array_valid_type(
static void is_pointer_valid_type(Pointer* ptr_type) { is_valid_type(
static void is_valid_type(
static void push_static_init(
static void push_zero_init_static_init(
static void resolve_addrof_expression(
static void resolve_array_compound_init_initializer(
static void resolve_array_struct_type(Array* arr_type) { resolve_struct_type(
static void resolve_arrow_expression(
static void resolve_assignment_expression(
static void resolve_binary_expression(
static void resolve_block(
static void resolve_block_items(
static void resolve_block_scope_variable_declaration(
static void resolve_break_statement(CBreak* node) { annotate_break_jump(
static void resolve_case_statement(
static void resolve_cast_expression(
static void resolve_compound_init_initializer(
static void resolve_compound_statement(
static void resolve_conditional_expression(
static void resolve_constant_expression(CConstant* node) { checktype_constant_expression(
static void resolve_continue_statement(CContinue* node) { annotate_continue_jump(
static void resolve_declaration(
static void resolve_default_statement(
static void resolve_dereference_expression(
static void resolve_do_while_statement(
static void resolve_dot_expression(
static void resolve_expression(
static void resolve_expression_statement(
static void resolve_file_scope_variable_declaration(
static void resolve_for_init(
static void resolve_for_statement(
static void resolve_fun_decl_declaration(
static void resolve_function_call_expression(
static void resolve_function_declaration(
static void resolve_goto_statement(
static void resolve_identifiers(
static void resolve_if_statement(
static void resolve_init_decl_for_init(
static void resolve_init_exp_for_init(
static void resolve_initializer(
static void resolve_label(
static void resolve_label_statement(
static void resolve_members_structure_declaration(
static void resolve_params_function_declaration(
static void resolve_pointer_struct_type(Pointer* ptr_type) { resolve_struct_type(
static void resolve_return_statement(
static void resolve_single_init_initializer(
static void resolve_sizeof_expression(
static void resolve_sizeoft_expression(CSizeOfT* node) { checktype_sizeoft_expression(
static void resolve_statement(
static void resolve_string_expression(CString* node) { checktype_string_expression(
static void resolve_struct_decl_declaration(
static void resolve_struct_type(
static void resolve_structure_compound_init_initializer(
static void resolve_structure_declaration(
static void resolve_structure_struct_type(
static void resolve_subscript_expression(
static void resolve_switch_statement(
static void resolve_unary_expression(
static void resolve_var_decl_declaration(
static void resolve_var_expression(
static void resolve_while_statement(
void analyze_semantic(
