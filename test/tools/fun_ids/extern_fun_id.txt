std::unique_ptr<AsmProgram> assembly_generation(
CConstChar::CConstChar(TChar value) : value(
CConstDouble::CConstDouble(TDouble value) : value(
CConstInt::CConstInt(TInt value) : value(
CConstLong::CConstLong(TLong value) : value(
CConstUChar::CConstUChar(TUChar value) : value(
CConstUInt::CConstUInt(TUInt value) : value(
CConstULong::CConstULong(TULong value) : value(
CStringLiteral::CStringLiteral(std::vector<TChar> value) : value(
IdentifierContext::IdentifierContext() : label_counter(0), variable_counter(0), structure_counter(
TIdentifier make_label_identifier(
TIdentifier make_string_identifier(
TIdentifier make_structure_identifier(
TIdentifier make_variable_identifier(
TIdentifier string_to_hash(
AsmCall::AsmCall(TIdentifier name) : name(
AsmCdq::AsmCdq(std::shared_ptr<AssemblyType> assembly_type) : assembly_type(
AsmData::AsmData(TIdentifier name, TLong offset) : name(name), offset(
AsmJmp::AsmJmp(TIdentifier target) : target(
AsmLabel::AsmLabel(TIdentifier name) : name(
AsmMemory::AsmMemory(TLong value, std::unique_ptr<AsmReg> reg) : value(value), reg(
AsmPop::AsmPop(std::unique_ptr<AsmReg> reg) : reg(
AsmPseudo::AsmPseudo(TIdentifier name) : name(
AsmPseudoMem::AsmPseudoMem(TIdentifier name, TLong offset) : name(name), offset(
AsmPush::AsmPush(std::shared_ptr<AsmOperand> src) : src(
AsmRegister::AsmRegister(std::unique_ptr<AsmReg> reg) : reg(
BackendFun::BackendFun(bool is_defined) : is_defined(
ByteArray::ByteArray(TLong size, TInt alignment) : size(size), alignment(
const char* get_argument_message(
const char* get_fatal_message(
const char* get_lexer_message(
const char* get_parser_message(
const char* get_semantic_message(
const char* get_util_message(
std::string get_assignment_hr(
std::string get_binary_op_hr(
std::string get_const_hr(
std::string get_name_hr(
std::string get_storage_class_hr(
std::string get_struct_name_hr(
std::string get_token_kind_hr(
std::string get_type_hr(
std::string get_unary_op_hr(
bool find_file(
bool read_line(
void file_close_read(
void file_close_write(
void file_open_read(
void file_open_write(
void set_filename(
void write_line(
CAddrOf::CAddrOf(std::unique_ptr<CExp> exp, size_t line) : CExp(line), exp(
CB::CB(std::vector<std::unique_ptr<CBlockItem>> block_items) : block_items(
CBreak::CBreak(size_t line) : line(
CCompound::CCompound(std::unique_ptr<CBlock> block) : block(
CConstant::CConstant(std::shared_ptr<CConst> constant, size_t line) : CExp(line), constant(
CContinue::CContinue(size_t line) : line(
CD::CD(std::unique_ptr<CDeclaration> declaration) : declaration(
CDefault::CDefault(std::unique_ptr<CStatement> jump_to, size_t line) : jump_to(std::move(jump_to)), line(
CDereference::CDereference(std::unique_ptr<CExp> exp, size_t line) : CExp(line), exp(
CExp::CExp(size_t line) : line(
CExpression::CExpression(std::unique_ptr<CExp> exp) : exp(
CFunDecl::CFunDecl(std::unique_ptr<CFunctionDeclaration> function_decl) : function_decl(
CGoto::CGoto(TIdentifier target, size_t line) : target(target), line(
CIdent::CIdent(TIdentifier name) : name(
CInitDecl::CInitDecl(std::unique_ptr<CVariableDeclaration> init) : init(
CInitExp::CInitExp(std::unique_ptr<CExp> init) : init(
CPointerDeclarator::CPointerDeclarator(std::unique_ptr<CDeclarator> declarator) : declarator(
CProgram::CProgram(std::vector<std::unique_ptr<CDeclaration>> declarations) : declarations(
CReturn::CReturn(std::unique_ptr<CExp> exp, size_t line) : exp(std::move(exp)), line(
CS::CS(std::unique_ptr<CStatement> statement) : statement(
CSingleInit::CSingleInit(std::unique_ptr<CExp> exp) : exp(
CSizeOf::CSizeOf(std::unique_ptr<CExp> exp, size_t line) : CExp(line), exp(
CSizeOfT::CSizeOfT(std::shared_ptr<Type> target_type, size_t line) : CExp(line), target_type(
CString::CString(std::shared_ptr<CStringLiteral> literal, size_t line) : CExp(line), literal(
CStructDecl::CStructDecl(std::unique_ptr<CStructDeclaration> struct_decl) : struct_decl(
CVar::CVar(TIdentifier name, size_t line) : CExp(line), name(
CVarDecl::CVarDecl(std::unique_ptr<CVariableDeclaration> variable_decl) : variable_decl(
Array::Array(TLong size, std::shared_ptr<Type> elem_type) : size(size), elem_type(
CharInit::CharInit(TChar value) : value(
ConstantAttr::ConstantAttr(std::shared_ptr<StaticInit> static_init) : static_init(
DoubleInit::DoubleInit(TIdentifier double_constant) : double_constant(
FunAttr::FunAttr(bool is_defined, bool is_global) : is_defined(is_defined), is_global(
Initial::Initial(std::vector<std::shared_ptr<StaticInit>> static_inits) : static_inits(
IntInit::IntInit(TInt value) : value(
LongInit::LongInit(TLong value) : value(
Pointer::Pointer(std::shared_ptr<Type> ref_type) : ref_type(
PointerInit::PointerInit(TIdentifier name) : name(
Structure::Structure(TIdentifier tag, bool is_union) : tag(tag), is_union(
UCharInit::UCharInit(TUChar value) : value(
UIntInit::UIntInit(TUInt value) : value(
ULongInit::ULongInit(TULong value) : value(
ZeroInit::ZeroInit(TLong byte) : byte(
void gas_code_emission(
TIdentifier represent_case_identifier(
TIdentifier represent_label_identifier(
TIdentifier represent_loop_identifier(
TIdentifier represent_variable_identifier(
TIdentifier resolve_label_identifier(
TIdentifier resolve_structure_tag(
TIdentifier resolve_variable_identifier(
TacConstant::TacConstant(std::shared_ptr<CConst> constant) : constant(
TacDereferencedPointer::TacDereferencedPointer(std::shared_ptr<TacValue> val) : val(
TacJump::TacJump(TIdentifier target) : target(
TacLabel::TacLabel(TIdentifier name) : name(
TacPlainOperand::TacPlainOperand(std::shared_ptr<TacValue> val) : val(
TacReturn::TacReturn(std::shared_ptr<TacValue> val) : val(
TacSubObject::TacSubObject(TIdentifier base_name, TLong offset) : base_name(base_name), offset(
TacVariable::TacVariable(TIdentifier name) : name(
std::vector<Token> lexing(
MainContext::MainContext() : is_verbose(
int main(
void three_address_code_optimization(
ParserContext::ParserContext(std::vector<Token>* p_tokens) : p_tokens(p_tokens), pop_index(
std::unique_ptr<CProgram> parsing(
void pretty_print_addressed_set(
void pretty_print_asm_code(
void pretty_print_ast(
void pretty_print_backend_symbol_table(
void pretty_print_string_constant_table(
void pretty_print_struct_typedef_table(
void pretty_print_symbol_table(
void pretty_print_tokens(
void register_allocation(
REGISTER_KIND register_mask_kind(
bool register_mask_get(
size_t register_mask_bit(
std::shared_ptr<AsmIndexed> generate_indexed(
std::shared_ptr<AsmMemory> generate_memory(
std::shared_ptr<AsmRegister> generate_register(
void register_mask_set(
void analyze_semantic(
StackFixContext::StackFixContext() : stack_bytes(
std::unique_ptr<AsmBinary> allocate_stack_bytes(
std::unique_ptr<AsmBinary> deallocate_stack_bytes(
void fix_stack(
double string_to_double(
hash_t string_to_hash(
int32_t intmax_to_int32(
int32_t string_literal_bytes_to_int32(
int32_t string_to_char_ascii(
int64_t intmax_to_int64(
int64_t string_literal_bytes_to_int64(
int8_t string_literal_bytes_to_int8(
intmax_t string_to_intmax(
std::string string_literal_to_string_constant(
uint32_t uintmax_to_uint32(
uint64_t double_to_binary(
uint64_t uintmax_to_uint64(
uintmax_t string_to_uintmax(
void string_to_string_literal(
TInt generate_type_alignment(
std::shared_ptr<AssemblyType> convert_backend_assembly_type(
void convert_symbol_table(
std::unique_ptr<TacProgram> three_address_code_representation(
size_t handle_error_at_line(
